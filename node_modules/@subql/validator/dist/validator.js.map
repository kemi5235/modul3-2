{"version":3,"file":"validator.js","sourceRoot":"","sources":["../src/validator.ts"],"names":[],"mappings":";AAAA,gEAAgE;AAChE,sCAAsC;;;AAGtC,uCAAgD;AAChD,mCAAuC;AASvC,MAAa,SAAS;IAIpB,YAA6B,QAAgB;QAAhB,aAAQ,GAAR,QAAQ,CAAQ;QAF5B,UAAK,GAAW,EAAE,CAAC;QAGlC,IAAI,CAAC,MAAM,GAAG,uBAAa,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;IAC/C,CAAC;IAED,OAAO,CAAC,GAAG,KAAa;QACtB,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC,CAAC;IAC5B,CAAC;IAED,KAAK,CAAC,kBAAkB;QACtB,MAAM,OAAO,GAAa,EAAE,CAAC;QAC7B,MAAM,CAAC,GAAG,EAAE,MAAM,CAAC,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,EAAE,IAAI,CAAC,MAAM,CAAC,gBAAgB,EAAE,CAAC,CAAC,CAAC;QAEhG,OAAO,CAAC,IAAI,CACV;YACE,IAAI,EAAE,mBAAmB;YACzB,WAAW,EAAE,6EAA6E;YAC1F,KAAK,EAAE,CAAC,CAAC,GAAG;YACZ,OAAO,EAAE,KAAK;SACf,EACD;YACE,IAAI,EAAE,mBAAmB;YACzB,WAAW,EAAE,6EAA6E;YAC1F,KAAK,EAAE,CAAC,CAAC,GAAG;YACZ,OAAO,EAAE,KAAK;SACf,CACF,CAAC;QAEF,MAAM,GAAG,GAAY;YACnB,IAAI,EAAE;gBACJ,WAAW,EAAE,IAAI,CAAC,QAAQ;gBAC1B,GAAG;gBACH,MAAM;aACP;YACD,MAAM,EAAE,OAAO;SAChB,CAAC;QAEF,KAAK,MAAM,CAAC,IAAI,IAAI,CAAC,KAAK,EAAE;YAC1B,MAAM,MAAM,GAAG;gBACb,IAAI,EAAE,CAAC,CAAC,IAAI;gBACZ,WAAW,EAAE,CAAC,CAAC,WAAW;gBAC1B,KAAK,EAAE,KAAK;gBACZ,OAAO,EAAE,KAAK;aACf,CAAC;YACF,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,IAAI,KAAK,gBAAQ,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,MAAM,IAAI,CAAC,CAAC,IAAI,KAAK,gBAAQ,CAAC,MAAM,CAAC,EAAE;gBACxF,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC;aACvB;iBAAM;gBACL,MAAM,CAAC,KAAK,GAAG,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;aAChC;YACD,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;SACtB;QACD,OAAO,OAAO,CAAC;IACjB,CAAC;IAED,KAAK,CAAC,QAAQ;QACZ,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,kBAAkB,EAAE,CAAC;QAChD,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;IACxC,CAAC;CACF;AA7DD,8BA6DC","sourcesContent":["// Copyright 2020-2021 OnFinality Limited authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\nimport {Context} from './context';\nimport {Reader, ReaderFactory} from './readers';\nimport {Rule, RuleType} from './rules';\n\nexport interface Report {\n  name: string;\n  skipped: boolean;\n  description: string;\n  valid: boolean;\n}\n\nexport class Validator {\n  private readonly reader: Reader;\n  private readonly rules: Rule[] = [];\n\n  constructor(private readonly location: string) {\n    this.reader = ReaderFactory.create(location);\n  }\n\n  addRule(...rules: Rule[]): void {\n    this.rules.push(...rules);\n  }\n\n  async getValidateReports(): Promise<Report[]> {\n    const reports: Report[] = [];\n    const [pkg, schema] = await Promise.all([this.reader.getPkg(), this.reader.getProjectSchema()]);\n\n    reports.push(\n      {\n        name: 'package-json-file',\n        description: 'A valid `package.json` file must exist in the root directory of the project',\n        valid: !!pkg,\n        skipped: false,\n      },\n      {\n        name: 'project-yaml-file',\n        description: 'A valid `project.yaml` file must exist in the root directory of the project',\n        valid: !!pkg,\n        skipped: false,\n      }\n    );\n\n    const ctx: Context = {\n      data: {\n        projectPath: this.location,\n        pkg,\n        schema,\n      },\n      logger: console,\n    };\n\n    for (const r of this.rules) {\n      const report = {\n        name: r.name,\n        description: r.description,\n        valid: false,\n        skipped: false,\n      };\n      if ((!pkg && r.type === RuleType.PackageJSON) || (!schema && r.type === RuleType.Schema)) {\n        report.skipped = true;\n      } else {\n        report.valid = r.validate(ctx);\n      }\n      reports.push(report);\n    }\n    return reports;\n  }\n\n  async validate(): Promise<boolean> {\n    const reports = await this.getValidateReports();\n    return !reports.some((r) => !r.valid);\n  }\n}\n"]}