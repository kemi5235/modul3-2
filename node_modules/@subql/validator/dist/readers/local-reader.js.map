{"version":3,"file":"local-reader.js","sourceRoot":"","sources":["../../src/readers/local-reader.ts"],"names":[],"mappings":";AAAA,gEAAgE;AAChE,sCAAsC;;;;;;;;;;;;;;;;;;;;;;;;;AAEtC,uCAAyB;AACzB,2CAA6B;AAC7B,sDAA2B;AAI3B,MAAa,WAAW;IACtB,YAA6B,WAAmB;QAAnB,gBAAW,GAAX,WAAW,CAAQ;IAAG,CAAC;IAEpD,KAAK,CAAC,MAAM;QACV,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,cAAc,CAAC,CAAC;QACzD,IAAI,CAAC,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE;YACxB,OAAO,OAAO,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;SACnC;QAED,IAAI;YACF,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC;YAC1D,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;SAC9B;QAAC,OAAO,GAAG,EAAE;YACZ,OAAO,OAAO,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;SACnC;IACH,CAAC;IAED,KAAK,CAAC,gBAAgB;QACpB,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,cAAc,CAAC,CAAC;QACzD,IAAI,CAAC,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE;YACxB,OAAO,OAAO,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;SACnC;QAED,IAAI;YACF,MAAM,IAAI,GAAG,iBAAI,CAAC,IAAI,CAAC,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC;YACzD,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;SAC9B;QAAC,OAAO,GAAG,EAAE;YACZ,OAAO,OAAO,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;SACnC;IACH,CAAC;CACF;AA9BD,kCA8BC","sourcesContent":["// Copyright 2020-2021 OnFinality Limited authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport yaml from 'js-yaml';\nimport {IPackageJson} from 'package-json-type';\nimport {Reader} from './reader';\n\nexport class LocalReader implements Reader {\n  constructor(private readonly projectPath: string) {}\n\n  async getPkg(): Promise<IPackageJson | undefined> {\n    const file = path.join(this.projectPath, 'package.json');\n    if (!fs.existsSync(file)) {\n      return Promise.resolve(undefined);\n    }\n\n    try {\n      const data = JSON.parse(fs.readFileSync(file).toString());\n      return Promise.resolve(data);\n    } catch (err) {\n      return Promise.resolve(undefined);\n    }\n  }\n\n  async getProjectSchema(): Promise<unknown | undefined> {\n    const file = path.join(this.projectPath, 'project.yaml');\n    if (!fs.existsSync(file)) {\n      return Promise.resolve(undefined);\n    }\n\n    try {\n      const data = yaml.load(fs.readFileSync(file).toString());\n      return Promise.resolve(data);\n    } catch (err) {\n      return Promise.resolve(undefined);\n    }\n  }\n}\n"]}