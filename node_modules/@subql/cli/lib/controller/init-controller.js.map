{"version":3,"file":"init-controller.js","sourceRoot":"","sources":["../../src/controller/init-controller.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020-2021 OnFinality Limited authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\nimport fs from 'fs';\nimport * as path from 'path';\nimport {promisify} from 'util';\nimport {ProjectManifest} from '@subql/common';\nimport yaml from 'js-yaml';\nimport rimraf from 'rimraf';\nimport simpleGit from 'simple-git';\nimport {ProjectSpec} from '../types';\n\nconst STARTER_PATH = 'https://github.com/subquery/subql-starter';\n\nexport async function createProject(localPath: string, project: ProjectSpec): Promise<void> {\n  const projectPath = path.join(localPath, project.name);\n  try {\n    await simpleGit().clone(STARTER_PATH, projectPath);\n  } catch (e) {\n    throw new Error('Failed to clone starter template from git');\n  }\n  try {\n    await prepareManifest(projectPath, project);\n  } catch (e) {\n    throw new Error('Failed to prepare read or write manifest while preparing the project');\n  }\n  try {\n    await preparePackage(projectPath, project);\n  } catch (e) {\n    throw new Error('Failed to prepare read or write package.json while preparing the project');\n  }\n  try {\n    await promisify(rimraf)(`${projectPath}/.git`);\n  } catch (e) {\n    throw new Error('Failed to remove .git from starter project');\n  }\n}\n\nasync function preparePackage(projectPath: string, project: ProjectSpec): Promise<void> {\n  //load and write package.json\n  const packageData = await fs.promises.readFile(`${projectPath}/package.json`);\n  const currentPackage = JSON.parse(packageData.toString());\n  currentPackage.name = project.name;\n  currentPackage.version = project.version;\n  currentPackage.description = project.description ?? currentPackage.description;\n  currentPackage.author = project.author;\n  currentPackage.license = project.license;\n  const newPackage = JSON.stringify(currentPackage, null, 2);\n  await fs.promises.writeFile(`${projectPath}/package.json`, newPackage, 'utf8');\n}\n\nasync function prepareManifest(projectPath: string, project: ProjectSpec): Promise<void> {\n  //load and write manifest(project.yaml)\n  const yamlPath = path.join(`${projectPath}`, `project.yaml`);\n  const manifest = await fs.promises.readFile(yamlPath, 'utf8');\n  const data = yaml.load(manifest) as ProjectManifest;\n  data.description = project.description ?? data.description;\n  data.network.endpoint = project.endpoint;\n  data.repository = project.repository ?? '';\n  const newYaml = yaml.dump(data);\n  await fs.promises.writeFile(yamlPath, newYaml, 'utf8');\n}\n"]}