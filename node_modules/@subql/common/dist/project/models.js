"use strict";
// Copyright 2020-2021 OnFinality Limited authors & contributors
// SPDX-License-Identifier: Apache-2.0
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RuntimeDataSource = exports.Mapping = exports.EventHandler = exports.CallHandler = exports.BlockHandler = exports.CallFilter = exports.NetworkFilter = exports.EventFilter = exports.BlockFilter = exports.ProjectManifestImpl = exports.ProjectNetwork = void 0;
const class_transformer_1 = require("class-transformer");
const class_validator_1 = require("class-validator");
const constants_1 = require("./constants");
class ProjectNetwork {
}
__decorate([
    class_validator_1.IsString(),
    __metadata("design:type", String)
], ProjectNetwork.prototype, "endpoint", void 0);
__decorate([
    class_validator_1.IsString(),
    class_validator_1.IsOptional(),
    __metadata("design:type", String)
], ProjectNetwork.prototype, "dictionary", void 0);
__decorate([
    class_validator_1.IsObject(),
    class_validator_1.IsOptional(),
    __metadata("design:type", Object)
], ProjectNetwork.prototype, "types", void 0);
__decorate([
    class_validator_1.IsObject(),
    class_validator_1.IsOptional(),
    __metadata("design:type", Object)
], ProjectNetwork.prototype, "typesAlias", void 0);
__decorate([
    class_validator_1.IsObject(),
    class_validator_1.IsOptional(),
    __metadata("design:type", Object)
], ProjectNetwork.prototype, "typesBundle", void 0);
__decorate([
    class_validator_1.IsObject(),
    class_validator_1.IsOptional(),
    __metadata("design:type", Object)
], ProjectNetwork.prototype, "typesChain", void 0);
__decorate([
    class_validator_1.IsObject(),
    class_validator_1.IsOptional(),
    __metadata("design:type", Object)
], ProjectNetwork.prototype, "typesSpec", void 0);
exports.ProjectNetwork = ProjectNetwork;
class ProjectManifestImpl {
}
__decorate([
    class_validator_1.Allow(),
    __metadata("design:type", Object)
], ProjectManifestImpl.prototype, "definitions", void 0);
__decorate([
    class_validator_1.IsString(),
    __metadata("design:type", String)
], ProjectManifestImpl.prototype, "description", void 0);
__decorate([
    class_validator_1.ValidateNested(),
    class_transformer_1.Type(() => ProjectNetwork),
    class_validator_1.IsObject(),
    __metadata("design:type", ProjectNetwork)
], ProjectManifestImpl.prototype, "network", void 0);
__decorate([
    class_validator_1.IsString(),
    __metadata("design:type", String)
], ProjectManifestImpl.prototype, "repository", void 0);
__decorate([
    class_validator_1.IsString(),
    __metadata("design:type", String)
], ProjectManifestImpl.prototype, "schema", void 0);
__decorate([
    class_validator_1.IsString(),
    __metadata("design:type", String)
], ProjectManifestImpl.prototype, "specVersion", void 0);
__decorate([
    class_validator_1.IsArray(),
    class_validator_1.ValidateNested(),
    class_transformer_1.Type(() => RuntimeDataSource),
    __metadata("design:type", Array)
], ProjectManifestImpl.prototype, "dataSources", void 0);
exports.ProjectManifestImpl = ProjectManifestImpl;
class BlockFilter {
}
__decorate([
    class_validator_1.IsOptional(),
    class_validator_1.IsArray(),
    class_validator_1.ArrayMaxSize(2),
    __metadata("design:type", Array)
], BlockFilter.prototype, "specVersion", void 0);
exports.BlockFilter = BlockFilter;
class EventFilter extends BlockFilter {
}
__decorate([
    class_validator_1.IsOptional(),
    class_validator_1.IsString(),
    __metadata("design:type", String)
], EventFilter.prototype, "module", void 0);
__decorate([
    class_validator_1.IsOptional(),
    class_validator_1.IsString(),
    __metadata("design:type", String)
], EventFilter.prototype, "method", void 0);
exports.EventFilter = EventFilter;
class NetworkFilter {
}
__decorate([
    class_validator_1.IsString(),
    __metadata("design:type", String)
], NetworkFilter.prototype, "specName", void 0);
exports.NetworkFilter = NetworkFilter;
class CallFilter extends EventFilter {
}
__decorate([
    class_validator_1.IsOptional(),
    class_validator_1.IsBoolean(),
    __metadata("design:type", Boolean)
], CallFilter.prototype, "success", void 0);
exports.CallFilter = CallFilter;
class BlockHandler {
}
__decorate([
    class_validator_1.IsOptional(),
    class_validator_1.ValidateNested(),
    class_transformer_1.Type(() => BlockFilter),
    __metadata("design:type", Object)
], BlockHandler.prototype, "filter", void 0);
__decorate([
    class_validator_1.IsEnum(constants_1.SubqlKind, { groups: [constants_1.SubqlKind.BlockHandler] }),
    __metadata("design:type", String)
], BlockHandler.prototype, "kind", void 0);
__decorate([
    class_validator_1.IsString(),
    __metadata("design:type", String)
], BlockHandler.prototype, "handler", void 0);
exports.BlockHandler = BlockHandler;
class CallHandler {
}
__decorate([
    class_validator_1.IsOptional(),
    class_validator_1.ValidateNested(),
    class_transformer_1.Type(() => CallFilter),
    __metadata("design:type", Object)
], CallHandler.prototype, "filter", void 0);
__decorate([
    class_validator_1.IsEnum(constants_1.SubqlKind, { groups: [constants_1.SubqlKind.CallHandler] }),
    __metadata("design:type", String)
], CallHandler.prototype, "kind", void 0);
__decorate([
    class_validator_1.IsString(),
    __metadata("design:type", String)
], CallHandler.prototype, "handler", void 0);
exports.CallHandler = CallHandler;
class EventHandler {
}
__decorate([
    class_validator_1.IsOptional(),
    class_validator_1.ValidateNested(),
    class_transformer_1.Type(() => EventFilter),
    __metadata("design:type", Object)
], EventHandler.prototype, "filter", void 0);
__decorate([
    class_validator_1.IsEnum(constants_1.SubqlKind, { groups: [constants_1.SubqlKind.EventHandler] }),
    __metadata("design:type", String)
], EventHandler.prototype, "kind", void 0);
__decorate([
    class_validator_1.IsString(),
    __metadata("design:type", String)
], EventHandler.prototype, "handler", void 0);
exports.EventHandler = EventHandler;
class Mapping {
}
__decorate([
    class_transformer_1.Transform((handlers) => {
        return handlers.map((handler) => {
            switch (handler.kind) {
                case constants_1.SubqlKind.EventHandler:
                    return class_transformer_1.plainToClass(EventHandler, handler);
                case constants_1.SubqlKind.CallHandler:
                    return class_transformer_1.plainToClass(CallHandler, handler);
                case constants_1.SubqlKind.BlockHandler:
                    return class_transformer_1.plainToClass(BlockHandler, handler);
                default:
                    throw new Error(`handler ${handler.kind} not supported`);
            }
        });
    }),
    class_validator_1.IsArray(),
    class_validator_1.ValidateNested(),
    __metadata("design:type", Array)
], Mapping.prototype, "handlers", void 0);
exports.Mapping = Mapping;
class RuntimeDataSource {
}
__decorate([
    class_validator_1.IsEnum(constants_1.SubqlKind, { groups: [constants_1.SubqlKind.Runtime] }),
    __metadata("design:type", String)
], RuntimeDataSource.prototype, "kind", void 0);
__decorate([
    class_transformer_1.Type(() => Mapping),
    class_validator_1.ValidateNested(),
    __metadata("design:type", Object)
], RuntimeDataSource.prototype, "mapping", void 0);
__decorate([
    class_validator_1.IsString(),
    __metadata("design:type", String)
], RuntimeDataSource.prototype, "name", void 0);
__decorate([
    class_validator_1.IsOptional(),
    class_validator_1.IsInt(),
    __metadata("design:type", Number)
], RuntimeDataSource.prototype, "startBlock", void 0);
__decorate([
    class_validator_1.IsOptional(),
    class_validator_1.ValidateNested(),
    class_transformer_1.Type(() => NetworkFilter),
    __metadata("design:type", Object)
], RuntimeDataSource.prototype, "filter", void 0);
exports.RuntimeDataSource = RuntimeDataSource;
//# sourceMappingURL=models.js.map