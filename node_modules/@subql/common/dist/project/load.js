"use strict";
// Copyright 2020-2021 OnFinality Limited authors & contributors
// SPDX-License-Identifier: Apache-2.0
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.loadProjectManifest = void 0;
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const class_transformer_1 = require("class-transformer");
const class_validator_1 = require("class-validator");
const js_yaml_1 = __importDefault(require("js-yaml"));
const models_1 = require("./models");
function loadProjectManifest(file) {
    let filePath = file;
    if (fs_1.default.existsSync(file) && fs_1.default.lstatSync(file).isDirectory()) {
        filePath = path_1.default.join(file, 'project.yaml');
    }
    const doc = js_yaml_1.default.load(fs_1.default.readFileSync(filePath, 'utf-8'));
    const manifest = class_transformer_1.plainToClass(models_1.ProjectManifestImpl, doc);
    const errors = class_validator_1.validateSync(manifest, { whitelist: true, forbidNonWhitelisted: true });
    if (errors === null || errors === void 0 ? void 0 : errors.length) {
        // TODO: print error details
        const errorMsgs = errors.map((e) => e.toString()).join('\n');
        throw new Error(`failed to parse project.yaml.\n${errorMsgs}`);
    }
    return manifest;
}
exports.loadProjectManifest = loadProjectManifest;
//# sourceMappingURL=load.js.map