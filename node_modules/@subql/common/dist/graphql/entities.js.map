{"version":3,"file":"entities.js","sourceRoot":"","sources":["../../src/graphql/entities.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020-2021 OnFinality Limited authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\nimport assert from 'assert';\nimport {\n  assertListType,\n  getDirectiveValues,\n  getNullableType,\n  GraphQLField,\n  GraphQLObjectType,\n  GraphQLOutputType,\n  GraphQLSchema,\n  isListType,\n  isNonNullType,\n  isObjectType,\n} from 'graphql';\nimport {DirectiveName} from './constant';\n\nimport {buildSchema} from './schema';\nimport {\n  FieldScalar,\n  GraphQLEntityField,\n  GraphQLJsonFieldType,\n  GraphQLJsonObjectType,\n  GraphQLModelsRelations,\n  GraphQLModelsType,\n  GraphQLRelationsType,\n  IndexType,\n} from './types';\n\nexport function getAllJsonObjects(_schema: GraphQLSchema | string) {\n  const schema = typeof _schema === 'string' ? buildSchema(_schema) : _schema;\n  return Object.values(schema.getTypeMap())\n    .filter((node) => node.astNode?.directives?.find(({name: {value}}) => value === DirectiveName.JsonField))\n    .map((node) => node)\n    .filter(isObjectType);\n}\n\nexport function getAllEntitiesRelations(_schema: GraphQLSchema | string): GraphQLModelsRelations {\n  const schema = typeof _schema === 'string' ? buildSchema(_schema) : _schema;\n  const entities = Object.values(schema.getTypeMap())\n    .filter((node) => node.astNode?.directives?.find(({name: {value}}) => value === DirectiveName.Entity))\n    .map((node) => node)\n    .filter(isObjectType);\n\n  const jsonObjects = getAllJsonObjects(schema);\n\n  const entityNameSet = entities.map((entity) => entity.name);\n\n  const modelRelations = {models: [], relations: []} as GraphQLModelsRelations;\n  const derivedFrom = schema.getDirective('derivedFrom');\n  const indexDirective = schema.getDirective('index');\n  for (const entity of entities) {\n    const newModel: GraphQLModelsType = {\n      name: entity.name,\n      fields: [],\n      indexes: [],\n    };\n\n    for (const field of Object.values(entity.getFields())) {\n      const typeString = extractType(field.type).toString();\n      const derivedFromDirectValues = getDirectiveValues(derivedFrom, field.astNode);\n\n      //If is a basic scalar type\n      if (Object.values(FieldScalar).includes(typeString)) {\n        newModel.fields.push(packEntityField(typeString, field, false));\n      }\n      // If is a foreign key\n      else if (entityNameSet.includes(typeString) && !derivedFromDirectValues) {\n        newModel.fields.push(packEntityField(typeString, field, true));\n        modelRelations.relations.push({\n          from: entity.name,\n          type: 'belongsTo',\n          to: typeString,\n          foreignKey: `${field.name}Id`,\n        } as GraphQLRelationsType);\n      }\n      // If is derivedFrom\n      else if (entityNameSet.includes(typeString) && derivedFromDirectValues) {\n        modelRelations.relations.push({\n          from: entity.name,\n          type: isListType(isNonNullType(field.type) ? getNullableType(field.type) : field.type) ? 'hasMany' : 'hasOne',\n          to: typeString,\n          foreignKey: `${derivedFromDirectValues.field}Id`,\n          fieldName: field.name,\n        } as GraphQLRelationsType);\n      }\n      // If is jsonField\n      else if (jsonObjects.map((json) => json.name).includes(typeString)) {\n        const jsonObject = setJsonObjectType(\n          jsonObjects.find((object) => object.name === typeString),\n          jsonObjects\n        );\n        newModel.fields.push(packJSONField(typeString, field, jsonObject));\n        newModel.indexes.push({\n          unique: false,\n          fields: [field.name],\n          using: IndexType.GIN,\n        });\n      } else {\n        throw new Error(`${typeString} is not an valid type`);\n      }\n      // handle indexes\n      const indexDirectiveVal = getDirectiveValues(indexDirective, field.astNode);\n      if (indexDirectiveVal) {\n        if (typeString !== 'ID' && Object.values(FieldScalar).includes(typeString)) {\n          newModel.indexes.push({\n            unique: indexDirectiveVal.unique,\n            fields: [field.name],\n          });\n        } else if (typeString !== 'ID' && entityNameSet.includes(typeString)) {\n          newModel.indexes.push({\n            unique: indexDirectiveVal.unique,\n            fields: [`${field.name}Id`],\n            using: IndexType.HASH,\n          });\n        } else {\n          throw new Error(`index can not be added on field ${field.name}`);\n        }\n      }\n    }\n    modelRelations.models.push(newModel);\n  }\n  validateRelations(modelRelations);\n  return modelRelations;\n}\n\nfunction packEntityField(\n  typeString: FieldScalar,\n  field: GraphQLField<any, any>,\n  isForeignKey: boolean\n): GraphQLEntityField {\n  return {\n    name: isForeignKey ? `${field.name}Id` : field.name,\n    type: isForeignKey ? 'String' : typeString,\n    isArray: isListType(isNonNullType(field.type) ? getNullableType(field.type) : field.type),\n    nullable: !isNonNullType(field.type),\n  };\n}\n\nfunction packJSONField(\n  typeString: FieldScalar,\n  field: GraphQLField<any, any>,\n  jsonObject: GraphQLJsonObjectType\n): GraphQLEntityField {\n  return {\n    name: field.name,\n    type: 'Json',\n    jsonInterface: jsonObject,\n    isArray: isListType(isNonNullType(field.type) ? getNullableType(field.type) : field.type),\n    nullable: !isNonNullType(field.type),\n  };\n}\n\nexport function setJsonObjectType(\n  jsonObject: GraphQLObjectType<any, any>,\n  jsonObjects: GraphQLObjectType<any, any>[]\n): GraphQLJsonObjectType {\n  const graphQLJsonObject: GraphQLJsonObjectType = {\n    name: jsonObject.name,\n    fields: [],\n  };\n  for (const field of Object.values(jsonObject.getFields())) {\n    //check if field is also json\n    const typeString = extractType(field.type).toString();\n    const isJsonType = jsonObjects.map((json) => json.name).includes(typeString);\n    graphQLJsonObject.fields.push({\n      name: field.name,\n      type: isJsonType ? 'Json' : extractType(field.type),\n      jsonInterface: isJsonType\n        ? setJsonObjectType(\n            jsonObjects.find((object) => object.name === typeString),\n            jsonObjects\n          )\n        : undefined,\n      nullable: !isNonNullType(field.type),\n      isArray: isListType(isNonNullType(field.type) ? getNullableType(field.type) : field.type),\n    } as GraphQLJsonFieldType);\n  }\n  return graphQLJsonObject;\n}\n\n//Get the type, ready to be convert to string\nfunction extractType(type: GraphQLOutputType) {\n  const offNullType = isNonNullType(type) ? getNullableType(type) : type;\n  const offListType = isListType(offNullType) ? assertListType(offNullType).ofType : type;\n  return isNonNullType(offListType) ? getNullableType(offListType) : offListType;\n}\n\nfunction validateRelations(modelRelations: GraphQLModelsRelations): void {\n  for (const r of modelRelations.relations.filter((model) => model.type === 'hasMany' || model.type === 'hasOne')) {\n    assert(\n      modelRelations.models.find(\n        (model) => model.name === r.to && model.fields.find((field) => field.name === r.foreignKey)\n      ),\n      `Please check entity ${r.from} with field ${r.fieldName} has correct relation with entity ${r.to}`\n    );\n  }\n}\n"]}