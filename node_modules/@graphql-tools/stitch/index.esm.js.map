{"version":3,"file":"index.esm.js","sources":["../../../dist/stitch/src/typeFromAST.js","../../../dist/stitch/src/types.js","../../../dist/stitch/src/mergeValidations.js","../../../dist/stitch/src/mergeCandidates.js","../../../dist/stitch/src/definitions.js","../../../dist/stitch/src/typeCandidates.js","../../../dist/stitch/src/createMergedTypeResolver.js","../../../dist/stitch/src/stitchingInfo.js","../../../dist/stitch/src/subschemaConfigTransforms/computedDirectiveTransformer.js","../../../dist/stitch/src/subschemaConfigTransforms/isolateComputedFieldsTransformer.js","../../../dist/stitch/src/subschemaConfigTransforms/splitMergedTypeEntryPointsTransformer.js","../../../dist/stitch/src/subschemaConfigTransforms/index.js","../../../dist/stitch/src/stitchSchemas.js","../../../dist/stitch/src/selectionSetArgs.js"],"sourcesContent":["import { GraphQLEnumType, GraphQLInputObjectType, GraphQLInterfaceType, GraphQLObjectType, GraphQLScalarType, GraphQLUnionType, Kind, GraphQLDirective, DirectiveLocation, TokenKind, valueFromASTUntyped, getDirectiveValues, GraphQLDeprecatedDirective, } from 'graphql';\nimport { createStub, createNamedStub } from '@graphql-tools/utils';\nconst backcompatOptions = { commentDescriptions: true };\nexport default function typeFromAST(node) {\n    switch (node.kind) {\n        case Kind.OBJECT_TYPE_DEFINITION:\n            return makeObjectType(node);\n        case Kind.INTERFACE_TYPE_DEFINITION:\n            return makeInterfaceType(node);\n        case Kind.ENUM_TYPE_DEFINITION:\n            return makeEnumType(node);\n        case Kind.UNION_TYPE_DEFINITION:\n            return makeUnionType(node);\n        case Kind.SCALAR_TYPE_DEFINITION:\n            return makeScalarType(node);\n        case Kind.INPUT_OBJECT_TYPE_DEFINITION:\n            return makeInputObjectType(node);\n        case Kind.DIRECTIVE_DEFINITION:\n            return makeDirective(node);\n        default:\n            return null;\n    }\n}\nfunction makeObjectType(node) {\n    const config = {\n        name: node.name.value,\n        description: getDescription(node, backcompatOptions),\n        interfaces: () => node.interfaces.map(iface => createNamedStub(iface.name.value, 'interface')),\n        fields: () => makeFields(node.fields),\n        astNode: node,\n    };\n    return new GraphQLObjectType(config);\n}\nfunction makeInterfaceType(node) {\n    var _a;\n    const config = {\n        name: node.name.value,\n        description: getDescription(node, backcompatOptions),\n        interfaces: (_a = node.interfaces) === null || _a === void 0 ? void 0 : _a.map(iface => createNamedStub(iface.name.value, 'interface')),\n        fields: () => makeFields(node.fields),\n        astNode: node,\n    };\n    return new GraphQLInterfaceType(config);\n}\nfunction makeEnumType(node) {\n    const values = node.values.reduce((prev, value) => ({\n        ...prev,\n        [value.name.value]: {\n            description: getDescription(value, backcompatOptions),\n            deprecationReason: getDeprecationReason(value),\n            astNode: value,\n        },\n    }), {});\n    return new GraphQLEnumType({\n        name: node.name.value,\n        description: getDescription(node, backcompatOptions),\n        values,\n        astNode: node,\n    });\n}\nfunction makeUnionType(node) {\n    return new GraphQLUnionType({\n        name: node.name.value,\n        description: getDescription(node, backcompatOptions),\n        types: () => node.types.map(type => createNamedStub(type.name.value, 'object')),\n        astNode: node,\n    });\n}\nfunction makeScalarType(node) {\n    return new GraphQLScalarType({\n        name: node.name.value,\n        description: getDescription(node, backcompatOptions),\n        astNode: node,\n        // TODO: serialize default property setting can be dropped once\n        // upstream graphql-js TypeScript typings are updated, likely in v16\n        serialize: value => value,\n    });\n}\nfunction makeInputObjectType(node) {\n    return new GraphQLInputObjectType({\n        name: node.name.value,\n        description: getDescription(node, backcompatOptions),\n        fields: () => makeValues(node.fields),\n        astNode: node,\n    });\n}\nfunction makeFields(nodes) {\n    return nodes.reduce((prev, node) => ({\n        ...prev,\n        [node.name.value]: {\n            type: createStub(node.type, 'output'),\n            description: getDescription(node, backcompatOptions),\n            args: makeValues(node.arguments),\n            deprecationReason: getDeprecationReason(node),\n            astNode: node,\n        },\n    }), {});\n}\nfunction makeValues(nodes) {\n    return nodes.reduce((prev, node) => ({\n        ...prev,\n        [node.name.value]: {\n            type: createStub(node.type, 'input'),\n            defaultValue: node.defaultValue !== undefined ? valueFromASTUntyped(node.defaultValue) : undefined,\n            description: getDescription(node, backcompatOptions),\n            astNode: node,\n        },\n    }), {});\n}\nfunction makeDirective(node) {\n    const locations = [];\n    node.locations.forEach(location => {\n        if (location.value in DirectiveLocation) {\n            locations.push(location.value);\n        }\n    });\n    return new GraphQLDirective({\n        name: node.name.value,\n        description: node.description != null ? node.description.value : null,\n        locations,\n        isRepeatable: node.repeatable,\n        args: makeValues(node.arguments),\n        astNode: node,\n    });\n}\n// graphql < v13 does not export getDescription\nfunction getDescription(node, options) {\n    if (node.description != null) {\n        return node.description.value;\n    }\n    if (options.commentDescriptions) {\n        const rawValue = getLeadingCommentBlock(node);\n        if (rawValue !== undefined) {\n            return dedentBlockStringValue(`\\n${rawValue}`);\n        }\n    }\n}\nfunction getLeadingCommentBlock(node) {\n    const loc = node.loc;\n    if (!loc) {\n        return;\n    }\n    const comments = [];\n    let token = loc.startToken.prev;\n    while (token != null &&\n        token.kind === TokenKind.COMMENT &&\n        token.next != null &&\n        token.prev != null &&\n        token.line + 1 === token.next.line &&\n        token.line !== token.prev.line) {\n        const value = String(token.value);\n        comments.push(value);\n        token = token.prev;\n    }\n    return comments.length > 0 ? comments.reverse().join('\\n') : undefined;\n}\nfunction dedentBlockStringValue(rawString) {\n    // Expand a block string's raw value into independent lines.\n    const lines = rawString.split(/\\r\\n|[\\n\\r]/g);\n    // Remove common indentation from all lines but first.\n    const commonIndent = getBlockStringIndentation(lines);\n    if (commonIndent !== 0) {\n        for (let i = 1; i < lines.length; i++) {\n            lines[i] = lines[i].slice(commonIndent);\n        }\n    }\n    // Remove leading and trailing blank lines.\n    while (lines.length > 0 && isBlank(lines[0])) {\n        lines.shift();\n    }\n    while (lines.length > 0 && isBlank(lines[lines.length - 1])) {\n        lines.pop();\n    }\n    // Return a string of the lines joined with U+000A.\n    return lines.join('\\n');\n}\n/**\n * @internal\n */\nexport function getBlockStringIndentation(lines) {\n    let commonIndent = null;\n    for (let i = 1; i < lines.length; i++) {\n        const line = lines[i];\n        const indent = leadingWhitespace(line);\n        if (indent === line.length) {\n            continue; // skip empty lines\n        }\n        if (commonIndent === null || indent < commonIndent) {\n            commonIndent = indent;\n            if (commonIndent === 0) {\n                break;\n            }\n        }\n    }\n    return commonIndent === null ? 0 : commonIndent;\n}\nfunction leadingWhitespace(str) {\n    let i = 0;\n    while (i < str.length && (str[i] === ' ' || str[i] === '\\t')) {\n        i++;\n    }\n    return i;\n}\nfunction isBlank(str) {\n    return leadingWhitespace(str) === str.length;\n}\nfunction getDeprecationReason(node) {\n    const deprecated = getDirectiveValues(GraphQLDeprecatedDirective, node);\n    return deprecated === null || deprecated === void 0 ? void 0 : deprecated.reason;\n}\n//# sourceMappingURL=typeFromAST.js.map","export var ValidationLevel;\n(function (ValidationLevel) {\n    ValidationLevel[\"Error\"] = \"error\";\n    ValidationLevel[\"Warn\"] = \"warn\";\n    ValidationLevel[\"Off\"] = \"off\";\n})(ValidationLevel || (ValidationLevel = {}));\n//# sourceMappingURL=types.js.map","import { isEnumType, isNonNullType, getNullableType, getNamedType, isListType, isScalarType, } from 'graphql';\nimport { ValidationLevel, } from './types';\nexport function validateFieldConsistency(finalFieldConfig, candidates, typeMergingOptions) {\n    const fieldNamespace = `${candidates[0].type.name}.${candidates[0].fieldName}`;\n    const finalFieldNull = isNonNullType(finalFieldConfig.type);\n    validateTypeConsistency(finalFieldConfig, candidates.map(c => c.fieldConfig), 'field', fieldNamespace, typeMergingOptions);\n    if (getValidationSettings(fieldNamespace, typeMergingOptions).strictNullComparison &&\n        candidates.some(c => finalFieldNull !== isNonNullType(c.fieldConfig.type))) {\n        validationMessage(`Nullability of field \"${fieldNamespace}\" does not match across subschemas. Disable typeMergingOptions.validationSettings.strictNullComparison to permit safe divergences.`, fieldNamespace, typeMergingOptions);\n    }\n    else if (finalFieldNull && candidates.some(c => !isNonNullType(c.fieldConfig.type))) {\n        validationMessage(`Canonical definition of field \"${fieldNamespace}\" is not-null while some subschemas permit null. This will be an automatic error in future versions.`, fieldNamespace, typeMergingOptions);\n    }\n    const argCandidatesMap = Object.create(null);\n    candidates.forEach(({ fieldConfig }) => {\n        Object.entries(fieldConfig.args).forEach(([argName, arg]) => {\n            argCandidatesMap[argName] = argCandidatesMap[argName] || [];\n            argCandidatesMap[argName].push(arg);\n        });\n    });\n    if (Object.values(argCandidatesMap).some(argCandidates => candidates.length !== argCandidates.length)) {\n        validationMessage(`Canonical definition of field \"${fieldNamespace}\" implements inconsistent argument names across subschemas. Input may be filtered from some requests.`, fieldNamespace, typeMergingOptions);\n    }\n    Object.entries(argCandidatesMap).forEach(([argName, argCandidates]) => {\n        const argNamespace = `${fieldNamespace}.${argName}`;\n        const finalArgConfig = finalFieldConfig.args[argName] || argCandidates[argCandidates.length - 1];\n        const finalArgType = getNamedType(finalArgConfig.type);\n        const finalArgNull = isNonNullType(finalArgConfig.type);\n        validateTypeConsistency(finalArgConfig, argCandidates, 'argument', argNamespace, typeMergingOptions);\n        if (getValidationSettings(argNamespace, typeMergingOptions).strictNullComparison &&\n            argCandidates.some(c => finalArgNull !== isNonNullType(c.type))) {\n            validationMessage(`Nullability of argument \"${argNamespace}\" does not match across subschemas. Disable typeMergingOptions.validationSettings.strictNullComparison to permit safe divergences.`, argNamespace, typeMergingOptions);\n        }\n        else if (!finalArgNull && argCandidates.some(c => isNonNullType(c.type))) {\n            validationMessage(`Canonical definition of argument \"${argNamespace}\" permits null while some subschemas require not-null. This will be an automatic error in future versions.`, argNamespace, typeMergingOptions);\n        }\n        if (isEnumType(finalArgType)) {\n            validateInputEnumConsistency(finalArgType, argCandidates, typeMergingOptions);\n        }\n    });\n}\nexport function validateInputObjectConsistency(fieldInclusionMap, candidates, typeMergingOptions) {\n    Object.entries(fieldInclusionMap).forEach(([fieldName, count]) => {\n        if (candidates.length !== count) {\n            const namespace = `${candidates[0].type.name}.${fieldName}`;\n            validationMessage(`Definition of input field \"${namespace}\" is not implemented by all subschemas. Input may be filtered from some requests.`, namespace, typeMergingOptions);\n        }\n    });\n}\nexport function validateInputFieldConsistency(finalInputFieldConfig, candidates, typeMergingOptions) {\n    const inputFieldNamespace = `${candidates[0].type.name}.${candidates[0].fieldName}`;\n    const inputFieldConfigs = candidates.map(c => c.inputFieldConfig);\n    const finalInputFieldType = getNamedType(finalInputFieldConfig.type);\n    const finalInputFieldNull = isNonNullType(finalInputFieldConfig.type);\n    validateTypeConsistency(finalInputFieldConfig, inputFieldConfigs, 'input field', inputFieldNamespace, typeMergingOptions);\n    if (getValidationSettings(inputFieldNamespace, typeMergingOptions).strictNullComparison &&\n        candidates.some(c => finalInputFieldNull !== isNonNullType(c.inputFieldConfig.type))) {\n        validationMessage(`Nullability of input field \"${inputFieldNamespace}\" does not match across subschemas. Disable typeMergingOptions.validationSettings.strictNullComparison to permit safe divergences.`, inputFieldNamespace, typeMergingOptions);\n    }\n    else if (!finalInputFieldNull && candidates.some(c => isNonNullType(c.inputFieldConfig.type))) {\n        validationMessage(`Canonical definition of input field \"${inputFieldNamespace}\" permits null while some subschemas require not-null. This will be an automatic error in future versions.`, inputFieldNamespace, typeMergingOptions);\n    }\n    if (isEnumType(finalInputFieldType)) {\n        validateInputEnumConsistency(finalInputFieldType, inputFieldConfigs, typeMergingOptions);\n    }\n}\nexport function validateTypeConsistency(finalElementConfig, candidates, definitionType, settingNamespace, typeMergingOptions) {\n    const finalNamedType = getNamedType(finalElementConfig.type);\n    const finalIsScalar = isScalarType(finalNamedType);\n    const finalIsList = hasListType(finalElementConfig.type);\n    candidates.forEach(c => {\n        var _a, _b, _c;\n        if (finalIsList !== hasListType(c.type)) {\n            throw new Error(`Definitions of ${definitionType} \"${settingNamespace}\" implement inconsistent list types across subschemas and cannot be merged.`);\n        }\n        const currentNamedType = getNamedType(c.type);\n        if (finalNamedType.toString() !== currentNamedType.toString()) {\n            const proxiableScalar = !!((_c = (_b = (_a = typeMergingOptions === null || typeMergingOptions === void 0 ? void 0 : typeMergingOptions.validationSettings) === null || _a === void 0 ? void 0 : _a.proxiableScalars) === null || _b === void 0 ? void 0 : _b[finalNamedType.toString()]) === null || _c === void 0 ? void 0 : _c.includes(currentNamedType.toString()));\n            const bothScalars = finalIsScalar && isScalarType(currentNamedType);\n            const permitScalar = proxiableScalar && bothScalars;\n            if (proxiableScalar && !bothScalars) {\n                throw new Error(`Types ${finalNamedType} and ${currentNamedType} are not proxiable scalars.`);\n            }\n            if (!permitScalar) {\n                validationMessage(`Definitions of ${definitionType} \"${settingNamespace}\" implement inconsistent named types across subschemas. This will be an automatic error in future versions.`, settingNamespace, typeMergingOptions);\n            }\n        }\n    });\n}\nfunction hasListType(type) {\n    return isListType(getNullableType(type));\n}\nexport function validateInputEnumConsistency(inputEnumType, candidates, typeMergingOptions) {\n    const enumValueInclusionMap = Object.create(null);\n    candidates.forEach(candidate => {\n        const enumType = getNamedType(candidate.type);\n        if (isEnumType(enumType)) {\n            enumType.getValues().forEach(({ value }) => {\n                enumValueInclusionMap[value] = enumValueInclusionMap[value] || 0;\n                enumValueInclusionMap[value] += 1;\n            });\n        }\n    });\n    if (Object.values(enumValueInclusionMap).some(count => candidates.length !== count)) {\n        validationMessage(`Enum \"${inputEnumType.name}\" is used as an input with inconsistent values across subschemas. This will be an automatic error in future versions.`, inputEnumType.name, typeMergingOptions);\n    }\n}\nfunction validationMessage(message, settingNamespace, typeMergingOptions) {\n    var _a;\n    const override = `typeMergingOptions.validationScopes['${settingNamespace}'].validationLevel`;\n    const settings = getValidationSettings(settingNamespace, typeMergingOptions);\n    switch ((_a = settings.validationLevel) !== null && _a !== void 0 ? _a : ValidationLevel.Warn) {\n        case ValidationLevel.Off:\n            return;\n        case ValidationLevel.Error:\n            throw new Error(`${message} If this is intentional, you may disable this error by setting ${override} = \"warn|off\"`);\n        default:\n            console.warn(`${message} To disable this warning or elevate it to an error, set ${override} = \"error|off\"`);\n    }\n}\nfunction getValidationSettings(settingNamespace, typeMergingOptions) {\n    var _a, _b, _c;\n    return {\n        ...((_a = typeMergingOptions === null || typeMergingOptions === void 0 ? void 0 : typeMergingOptions.validationSettings) !== null && _a !== void 0 ? _a : {}),\n        ...((_c = (_b = typeMergingOptions === null || typeMergingOptions === void 0 ? void 0 : typeMergingOptions.validationScopes) === null || _b === void 0 ? void 0 : _b[settingNamespace]) !== null && _c !== void 0 ? _c : {}),\n    };\n}\n//# sourceMappingURL=mergeValidations.js.map","import { GraphQLObjectType, GraphQLInterfaceType, GraphQLUnionType, GraphQLEnumType, isScalarType, isObjectType, isInterfaceType, isUnionType, isEnumType, isInputObjectType, GraphQLInputObjectType, GraphQLScalarType, } from 'graphql';\nimport { mergeType, mergeInputType, mergeInterface, mergeUnion, mergeEnum, mergeScalar } from '@graphql-tools/merge';\nimport { validateFieldConsistency, validateInputFieldConsistency, validateInputObjectConsistency, } from './mergeValidations';\nimport { fieldToFieldConfig, inputFieldToFieldConfig } from '@graphql-tools/utils';\nimport { isSubschemaConfig } from '@graphql-tools/delegate';\nexport function mergeCandidates(typeName, candidates, typeMergingOptions) {\n    const initialCandidateType = candidates[0].type;\n    if (candidates.some(candidate => candidate.type.constructor !== initialCandidateType.constructor)) {\n        throw new Error(`Cannot merge different type categories into common type ${typeName}.`);\n    }\n    if (isObjectType(initialCandidateType)) {\n        return mergeObjectTypeCandidates(typeName, candidates, typeMergingOptions);\n    }\n    else if (isInputObjectType(initialCandidateType)) {\n        return mergeInputObjectTypeCandidates(typeName, candidates, typeMergingOptions);\n    }\n    else if (isInterfaceType(initialCandidateType)) {\n        return mergeInterfaceTypeCandidates(typeName, candidates, typeMergingOptions);\n    }\n    else if (isUnionType(initialCandidateType)) {\n        return mergeUnionTypeCandidates(typeName, candidates, typeMergingOptions);\n    }\n    else if (isEnumType(initialCandidateType)) {\n        return mergeEnumTypeCandidates(typeName, candidates, typeMergingOptions);\n    }\n    else if (isScalarType(initialCandidateType)) {\n        return mergeScalarTypeCandidates(typeName, candidates, typeMergingOptions);\n    }\n    else {\n        // not reachable.\n        throw new Error(`Type ${typeName} has unknown GraphQL type.`);\n    }\n}\nfunction mergeObjectTypeCandidates(typeName, candidates, typeMergingOptions) {\n    candidates = orderedTypeCandidates(candidates, typeMergingOptions);\n    const description = mergeTypeDescriptions(candidates, typeMergingOptions);\n    const fields = fieldConfigMapFromTypeCandidates(candidates, typeMergingOptions);\n    const typeConfigs = candidates.map(candidate => candidate.type.toConfig());\n    const interfaceMap = typeConfigs\n        .map(typeConfig => typeConfig.interfaces)\n        .reduce((acc, interfaces) => {\n        if (interfaces != null) {\n            interfaces.forEach(iface => {\n                acc[iface.name] = iface;\n            });\n        }\n        return acc;\n    }, Object.create(null));\n    const interfaces = Object.keys(interfaceMap).map(interfaceName => interfaceMap[interfaceName]);\n    const astNodes = pluck('astNode', candidates);\n    const fieldAstNodes = canonicalFieldNamesForType(candidates)\n        .map(fieldName => { var _a; return (_a = fields[fieldName]) === null || _a === void 0 ? void 0 : _a.astNode; })\n        .filter(n => n != null);\n    if (astNodes.length > 1 && fieldAstNodes.length) {\n        astNodes.push({\n            ...astNodes[astNodes.length - 1],\n            fields: JSON.parse(JSON.stringify(fieldAstNodes)),\n        });\n    }\n    const astNode = astNodes\n        .slice(1)\n        .reduce((acc, astNode) => mergeType(astNode, acc, { ignoreFieldConflicts: true }), astNodes[0]);\n    const extensionASTNodes = [].concat(pluck('extensionASTNodes', candidates));\n    const extensions = Object.assign({}, ...pluck('extensions', candidates));\n    const typeConfig = {\n        name: typeName,\n        description,\n        fields,\n        interfaces,\n        astNode,\n        extensionASTNodes,\n        extensions,\n    };\n    return new GraphQLObjectType(typeConfig);\n}\nfunction mergeInputObjectTypeCandidates(typeName, candidates, typeMergingOptions) {\n    candidates = orderedTypeCandidates(candidates, typeMergingOptions);\n    const description = mergeTypeDescriptions(candidates, typeMergingOptions);\n    const fields = inputFieldConfigMapFromTypeCandidates(candidates, typeMergingOptions);\n    const astNodes = pluck('astNode', candidates);\n    const fieldAstNodes = canonicalFieldNamesForType(candidates)\n        .map(fieldName => { var _a; return (_a = fields[fieldName]) === null || _a === void 0 ? void 0 : _a.astNode; })\n        .filter(n => n != null);\n    if (astNodes.length > 1 && fieldAstNodes.length) {\n        astNodes.push({\n            ...astNodes[astNodes.length - 1],\n            fields: JSON.parse(JSON.stringify(fieldAstNodes)),\n        });\n    }\n    const astNode = astNodes.slice(1).reduce((acc, astNode) => mergeInputType(astNode, acc, {\n        ignoreFieldConflicts: true,\n    }), astNodes[0]);\n    const extensionASTNodes = [].concat(pluck('extensionASTNodes', candidates));\n    const extensions = Object.assign({}, ...pluck('extensions', candidates));\n    const typeConfig = {\n        name: typeName,\n        description,\n        fields,\n        astNode,\n        extensionASTNodes,\n        extensions,\n    };\n    return new GraphQLInputObjectType(typeConfig);\n}\nfunction pluck(typeProperty, candidates) {\n    return candidates.map(candidate => candidate.type[typeProperty]).filter(value => value != null);\n}\nfunction mergeInterfaceTypeCandidates(typeName, candidates, typeMergingOptions) {\n    candidates = orderedTypeCandidates(candidates, typeMergingOptions);\n    const description = mergeTypeDescriptions(candidates, typeMergingOptions);\n    const fields = fieldConfigMapFromTypeCandidates(candidates, typeMergingOptions);\n    const typeConfigs = candidates.map(candidate => candidate.type.toConfig());\n    const interfaceMap = typeConfigs\n        .map(typeConfig => typeConfig.interfaces)\n        .reduce((acc, interfaces) => {\n        if (interfaces != null) {\n            interfaces.forEach(iface => {\n                acc[iface.name] = iface;\n            });\n        }\n        return acc;\n    }, Object.create(null));\n    const interfaces = Object.keys(interfaceMap).map(interfaceName => interfaceMap[interfaceName]);\n    const astNodes = pluck('astNode', candidates);\n    const fieldAstNodes = canonicalFieldNamesForType(candidates)\n        .map(fieldName => { var _a; return (_a = fields[fieldName]) === null || _a === void 0 ? void 0 : _a.astNode; })\n        .filter(n => n != null);\n    if (astNodes.length > 1 && fieldAstNodes.length) {\n        astNodes.push({\n            ...astNodes[astNodes.length - 1],\n            fields: JSON.parse(JSON.stringify(fieldAstNodes)),\n        });\n    }\n    const astNode = astNodes.slice(1).reduce((acc, astNode) => mergeInterface(astNode, acc, {\n        ignoreFieldConflicts: true,\n    }), astNodes[0]);\n    const extensionASTNodes = [].concat(pluck('extensionASTNodes', candidates));\n    const extensions = Object.assign({}, ...pluck('extensions', candidates));\n    const typeConfig = {\n        name: typeName,\n        description,\n        fields,\n        interfaces,\n        astNode,\n        extensionASTNodes,\n        extensions,\n    };\n    return new GraphQLInterfaceType(typeConfig);\n}\nfunction mergeUnionTypeCandidates(typeName, candidates, typeMergingOptions) {\n    candidates = orderedTypeCandidates(candidates, typeMergingOptions);\n    const description = mergeTypeDescriptions(candidates, typeMergingOptions);\n    const typeConfigs = candidates.map(candidate => candidate.type.toConfig());\n    const typeMap = typeConfigs.reduce((acc, typeConfig) => {\n        typeConfig.types.forEach(type => {\n            acc[type.name] = type;\n        });\n        return acc;\n    }, Object.create(null));\n    const types = Object.keys(typeMap).map(typeName => typeMap[typeName]);\n    const astNodes = pluck('astNode', candidates);\n    const astNode = astNodes\n        .slice(1)\n        .reduce((acc, astNode) => mergeUnion(astNode, acc), astNodes[0]);\n    const extensionASTNodes = [].concat(pluck('extensionASTNodes', candidates));\n    const extensions = Object.assign({}, ...pluck('extensions', candidates));\n    const typeConfig = {\n        name: typeName,\n        description,\n        types,\n        astNode,\n        extensionASTNodes,\n        extensions,\n    };\n    return new GraphQLUnionType(typeConfig);\n}\nfunction mergeEnumTypeCandidates(typeName, candidates, typeMergingOptions) {\n    candidates = orderedTypeCandidates(candidates, typeMergingOptions);\n    const description = mergeTypeDescriptions(candidates, typeMergingOptions);\n    const values = enumValueConfigMapFromTypeCandidates(candidates, typeMergingOptions);\n    const astNodes = pluck('astNode', candidates);\n    const astNode = astNodes\n        .slice(1)\n        .reduce((acc, astNode) => mergeEnum(astNode, acc, { consistentEnumMerge: true }), astNodes[0]);\n    const extensionASTNodes = [].concat(pluck('extensionASTNodes', candidates));\n    const extensions = Object.assign({}, ...pluck('extensions', candidates));\n    const typeConfig = {\n        name: typeName,\n        description,\n        values,\n        astNode,\n        extensionASTNodes,\n        extensions,\n    };\n    return new GraphQLEnumType(typeConfig);\n}\nfunction enumValueConfigMapFromTypeCandidates(candidates, typeMergingOptions) {\n    const enumValueConfigCandidatesMap = Object.create(null);\n    candidates.forEach(candidate => {\n        const valueMap = candidate.type.toConfig().values;\n        Object.keys(valueMap).forEach(enumValue => {\n            const enumValueConfigCandidate = {\n                enumValueConfig: valueMap[enumValue],\n                enumValue,\n                type: candidate.type,\n                subschema: candidate.subschema,\n                transformedSubschema: candidate.transformedSubschema,\n            };\n            if (enumValue in enumValueConfigCandidatesMap) {\n                enumValueConfigCandidatesMap[enumValue].push(enumValueConfigCandidate);\n            }\n            else {\n                enumValueConfigCandidatesMap[enumValue] = [enumValueConfigCandidate];\n            }\n        });\n    });\n    const enumValueConfigMap = Object.create(null);\n    Object.keys(enumValueConfigCandidatesMap).forEach(enumValue => {\n        var _a;\n        const enumValueConfigMerger = (_a = typeMergingOptions === null || typeMergingOptions === void 0 ? void 0 : typeMergingOptions.enumValueConfigMerger) !== null && _a !== void 0 ? _a : defaultEnumValueConfigMerger;\n        enumValueConfigMap[enumValue] = enumValueConfigMerger(enumValueConfigCandidatesMap[enumValue]);\n    });\n    return enumValueConfigMap;\n}\nfunction defaultEnumValueConfigMerger(candidates) {\n    const preferred = candidates.find(({ type, transformedSubschema }) => { var _a, _b; return isSubschemaConfig(transformedSubschema) && ((_b = (_a = transformedSubschema.merge) === null || _a === void 0 ? void 0 : _a[type.name]) === null || _b === void 0 ? void 0 : _b.canonical); });\n    return (preferred || candidates[candidates.length - 1]).enumValueConfig;\n}\nfunction mergeScalarTypeCandidates(typeName, candidates, typeMergingOptions) {\n    candidates = orderedTypeCandidates(candidates, typeMergingOptions);\n    const description = mergeTypeDescriptions(candidates, typeMergingOptions);\n    const serializeFns = pluck('serialize', candidates);\n    const serialize = serializeFns[serializeFns.length - 1];\n    const parseValueFns = pluck('parseValue', candidates);\n    const parseValue = parseValueFns[parseValueFns.length - 1];\n    const parseLiteralFns = pluck('parseLiteral', candidates);\n    const parseLiteral = parseLiteralFns[parseLiteralFns.length - 1];\n    const astNodes = pluck('astNode', candidates);\n    const astNode = astNodes\n        .slice(1)\n        .reduce((acc, astNode) => mergeScalar(astNode, acc), astNodes[0]);\n    const extensionASTNodes = [].concat(pluck('extensionASTNodes', candidates));\n    const extensions = Object.assign({}, ...pluck('extensions', candidates));\n    const typeConfig = {\n        name: typeName,\n        description,\n        serialize,\n        parseValue,\n        parseLiteral,\n        astNode,\n        extensionASTNodes,\n        extensions,\n    };\n    return new GraphQLScalarType(typeConfig);\n}\nfunction orderedTypeCandidates(candidates, typeMergingOptions) {\n    var _a;\n    const typeCandidateMerger = (_a = typeMergingOptions === null || typeMergingOptions === void 0 ? void 0 : typeMergingOptions.typeCandidateMerger) !== null && _a !== void 0 ? _a : defaultTypeCandidateMerger;\n    const candidate = typeCandidateMerger(candidates);\n    return candidates.filter(c => c !== candidate).concat([candidate]);\n}\nfunction defaultTypeCandidateMerger(candidates) {\n    const canonical = candidates.filter(({ type, transformedSubschema }) => { var _a, _b; return isSubschemaConfig(transformedSubschema) ? (_b = (_a = transformedSubschema.merge) === null || _a === void 0 ? void 0 : _a[type.name]) === null || _b === void 0 ? void 0 : _b.canonical : false; });\n    if (canonical.length > 1) {\n        throw new Error(`Multiple canonical definitions for \"${canonical[0].type.name}\"`);\n    }\n    else if (canonical.length) {\n        return canonical[0];\n    }\n    return candidates[candidates.length - 1];\n}\nfunction mergeTypeDescriptions(candidates, typeMergingOptions) {\n    var _a;\n    const typeDescriptionsMerger = (_a = typeMergingOptions === null || typeMergingOptions === void 0 ? void 0 : typeMergingOptions.typeDescriptionsMerger) !== null && _a !== void 0 ? _a : defaultTypeDescriptionMerger;\n    return typeDescriptionsMerger(candidates);\n}\nfunction defaultTypeDescriptionMerger(candidates) {\n    return candidates[candidates.length - 1].type.description;\n}\nfunction fieldConfigMapFromTypeCandidates(candidates, typeMergingOptions) {\n    const fieldConfigCandidatesMap = Object.create(null);\n    candidates.forEach(candidate => {\n        const fieldMap = candidate.type.getFields();\n        Object.keys(fieldMap).forEach(fieldName => {\n            const fieldConfigCandidate = {\n                fieldConfig: fieldToFieldConfig(fieldMap[fieldName]),\n                fieldName,\n                type: candidate.type,\n                subschema: candidate.subschema,\n                transformedSubschema: candidate.transformedSubschema,\n            };\n            if (fieldName in fieldConfigCandidatesMap) {\n                fieldConfigCandidatesMap[fieldName].push(fieldConfigCandidate);\n            }\n            else {\n                fieldConfigCandidatesMap[fieldName] = [fieldConfigCandidate];\n            }\n        });\n    });\n    const fieldConfigMap = Object.create(null);\n    Object.keys(fieldConfigCandidatesMap).forEach(fieldName => {\n        fieldConfigMap[fieldName] = mergeFieldConfigs(fieldConfigCandidatesMap[fieldName], typeMergingOptions);\n    });\n    return fieldConfigMap;\n}\nfunction mergeFieldConfigs(candidates, typeMergingOptions) {\n    var _a;\n    const fieldConfigMerger = (_a = typeMergingOptions === null || typeMergingOptions === void 0 ? void 0 : typeMergingOptions.fieldConfigMerger) !== null && _a !== void 0 ? _a : defaultFieldConfigMerger;\n    const finalFieldConfig = fieldConfigMerger(candidates);\n    validateFieldConsistency(finalFieldConfig, candidates, typeMergingOptions);\n    return finalFieldConfig;\n}\nfunction defaultFieldConfigMerger(candidates) {\n    const canonicalByField = [];\n    const canonicalByType = [];\n    candidates.forEach(({ type, fieldName, fieldConfig, transformedSubschema }) => {\n        var _a, _b, _c, _d, _e, _f;\n        if (!isSubschemaConfig(transformedSubschema))\n            return;\n        if ((_d = (_c = (_b = (_a = transformedSubschema.merge) === null || _a === void 0 ? void 0 : _a[type.name]) === null || _b === void 0 ? void 0 : _b.fields) === null || _c === void 0 ? void 0 : _c[fieldName]) === null || _d === void 0 ? void 0 : _d.canonical) {\n            canonicalByField.push(fieldConfig);\n        }\n        else if ((_f = (_e = transformedSubschema.merge) === null || _e === void 0 ? void 0 : _e[type.name]) === null || _f === void 0 ? void 0 : _f.canonical) {\n            canonicalByType.push(fieldConfig);\n        }\n    });\n    if (canonicalByField.length > 1) {\n        throw new Error(`Multiple canonical definitions for \"${candidates[0].type.name}.${candidates[0].fieldName}\"`);\n    }\n    else if (canonicalByField.length) {\n        return canonicalByField[0];\n    }\n    else if (canonicalByType.length) {\n        return canonicalByType[0];\n    }\n    return candidates[candidates.length - 1].fieldConfig;\n}\nfunction inputFieldConfigMapFromTypeCandidates(candidates, typeMergingOptions) {\n    const inputFieldConfigCandidatesMap = Object.create(null);\n    const fieldInclusionMap = Object.create(null);\n    candidates.forEach(candidate => {\n        const inputFieldMap = candidate.type.getFields();\n        Object.keys(inputFieldMap).forEach(fieldName => {\n            fieldInclusionMap[fieldName] = fieldInclusionMap[fieldName] || 0;\n            fieldInclusionMap[fieldName] += 1;\n            const inputFieldConfigCandidate = {\n                inputFieldConfig: inputFieldToFieldConfig(inputFieldMap[fieldName]),\n                fieldName,\n                type: candidate.type,\n                subschema: candidate.subschema,\n                transformedSubschema: candidate.transformedSubschema,\n            };\n            if (fieldName in inputFieldConfigCandidatesMap) {\n                inputFieldConfigCandidatesMap[fieldName].push(inputFieldConfigCandidate);\n            }\n            else {\n                inputFieldConfigCandidatesMap[fieldName] = [inputFieldConfigCandidate];\n            }\n        });\n    });\n    validateInputObjectConsistency(fieldInclusionMap, candidates, typeMergingOptions);\n    const inputFieldConfigMap = Object.create(null);\n    Object.keys(inputFieldConfigCandidatesMap).forEach(fieldName => {\n        var _a;\n        const inputFieldConfigMerger = (_a = typeMergingOptions === null || typeMergingOptions === void 0 ? void 0 : typeMergingOptions.inputFieldConfigMerger) !== null && _a !== void 0 ? _a : defaultInputFieldConfigMerger;\n        inputFieldConfigMap[fieldName] = inputFieldConfigMerger(inputFieldConfigCandidatesMap[fieldName]);\n        validateInputFieldConsistency(inputFieldConfigMap[fieldName], inputFieldConfigCandidatesMap[fieldName], typeMergingOptions);\n    });\n    return inputFieldConfigMap;\n}\nfunction defaultInputFieldConfigMerger(candidates) {\n    const canonicalByField = [];\n    const canonicalByType = [];\n    candidates.forEach(({ type, fieldName, inputFieldConfig, transformedSubschema }) => {\n        var _a, _b, _c, _d, _e, _f;\n        if (!isSubschemaConfig(transformedSubschema))\n            return;\n        if ((_d = (_c = (_b = (_a = transformedSubschema.merge) === null || _a === void 0 ? void 0 : _a[type.name]) === null || _b === void 0 ? void 0 : _b.fields) === null || _c === void 0 ? void 0 : _c[fieldName]) === null || _d === void 0 ? void 0 : _d.canonical) {\n            canonicalByField.push(inputFieldConfig);\n        }\n        else if ((_f = (_e = transformedSubschema.merge) === null || _e === void 0 ? void 0 : _e[type.name]) === null || _f === void 0 ? void 0 : _f.canonical) {\n            canonicalByType.push(inputFieldConfig);\n        }\n    });\n    if (canonicalByField.length > 1) {\n        throw new Error(`Multiple canonical definitions for \"${candidates[0].type.name}.${candidates[0].fieldName}\"`);\n    }\n    else if (canonicalByField.length) {\n        return canonicalByField[0];\n    }\n    else if (canonicalByType.length) {\n        return canonicalByType[0];\n    }\n    return candidates[candidates.length - 1].inputFieldConfig;\n}\nfunction canonicalFieldNamesForType(candidates) {\n    const canonicalFieldNames = Object.create(null);\n    candidates.forEach(({ type, transformedSubschema }) => {\n        var _a, _b;\n        if (isSubschemaConfig(transformedSubschema) &&\n            ((_b = (_a = transformedSubschema.merge) === null || _a === void 0 ? void 0 : _a[type.name]) === null || _b === void 0 ? void 0 : _b.fields) &&\n            !transformedSubschema.merge[type.name].canonical) {\n            Object.entries(transformedSubschema.merge[type.name].fields).forEach(([fieldName, mergedFieldConfig]) => {\n                if (mergedFieldConfig.canonical) {\n                    canonicalFieldNames[fieldName] = true;\n                }\n            });\n        }\n    });\n    return Object.keys(canonicalFieldNames);\n}\n//# sourceMappingURL=mergeCandidates.js.map","import { Kind, } from 'graphql';\nexport function extractDefinitions(ast) {\n    const typeDefinitions = [];\n    const directiveDefs = [];\n    const schemaDefs = [];\n    const schemaExtensions = [];\n    const extensionDefs = [];\n    ast.definitions.forEach(def => {\n        switch (def.kind) {\n            case Kind.OBJECT_TYPE_DEFINITION:\n            case Kind.INTERFACE_TYPE_DEFINITION:\n            case Kind.INPUT_OBJECT_TYPE_DEFINITION:\n            case Kind.UNION_TYPE_DEFINITION:\n            case Kind.ENUM_TYPE_DEFINITION:\n            case Kind.SCALAR_TYPE_DEFINITION:\n                typeDefinitions.push(def);\n                break;\n            case Kind.DIRECTIVE_DEFINITION:\n                directiveDefs.push(def);\n                break;\n            case Kind.SCHEMA_DEFINITION:\n                schemaDefs.push(def);\n                break;\n            case Kind.SCHEMA_EXTENSION:\n                schemaExtensions.push(def);\n                break;\n            case Kind.OBJECT_TYPE_EXTENSION:\n            case Kind.INTERFACE_TYPE_EXTENSION:\n            case Kind.INPUT_OBJECT_TYPE_EXTENSION:\n            case Kind.UNION_TYPE_EXTENSION:\n            case Kind.ENUM_TYPE_EXTENSION:\n            case Kind.SCALAR_TYPE_EXTENSION:\n                extensionDefs.push(def);\n                break;\n        }\n    });\n    return {\n        typeDefinitions,\n        directiveDefs,\n        schemaDefs,\n        schemaExtensions,\n        extensionDefs,\n    };\n}\n//# sourceMappingURL=definitions.js.map","import { getNamedType, isNamedType, isSpecifiedScalarType, } from 'graphql';\nimport { wrapSchema } from '@graphql-tools/wrap';\nimport { rewireTypes } from '@graphql-tools/utils';\nimport { buildDocumentFromTypeDefinitions } from '@graphql-tools/schema';\nimport typeFromAST from './typeFromAST';\nimport { mergeCandidates } from './mergeCandidates';\nimport { extractDefinitions } from './definitions';\nexport function buildTypeCandidates({ subschemas, originalSubschemaMap, types, typeDefs, parseOptions, extensions, directiveMap, schemaDefs, operationTypeNames, mergeDirectives, }) {\n    const typeCandidates = Object.create(null);\n    let schemaDef;\n    let schemaExtensions = [];\n    let document;\n    let extraction;\n    if ((typeDefs && !Array.isArray(typeDefs)) || (Array.isArray(typeDefs) && typeDefs.length)) {\n        document = buildDocumentFromTypeDefinitions(typeDefs, parseOptions);\n        extraction = extractDefinitions(document);\n        schemaDef = extraction.schemaDefs[0];\n        schemaExtensions = schemaExtensions.concat(extraction.schemaExtensions);\n    }\n    schemaDefs.schemaDef = schemaDef;\n    schemaDefs.schemaExtensions = schemaExtensions;\n    setOperationTypeNames(schemaDefs, operationTypeNames);\n    subschemas.forEach(subschema => {\n        const schema = wrapSchema(subschema);\n        const operationTypes = {\n            query: schema.getQueryType(),\n            mutation: schema.getMutationType(),\n            subscription: schema.getSubscriptionType(),\n        };\n        Object.keys(operationTypes).forEach(operationType => {\n            if (operationTypes[operationType] != null) {\n                addTypeCandidate(typeCandidates, operationTypeNames[operationType], {\n                    type: operationTypes[operationType],\n                    subschema: originalSubschemaMap.get(subschema),\n                    transformedSubschema: subschema,\n                });\n            }\n        });\n        if (mergeDirectives) {\n            schema.getDirectives().forEach(directive => {\n                directiveMap[directive.name] = directive;\n            });\n        }\n        const originalTypeMap = schema.getTypeMap();\n        Object.keys(originalTypeMap).forEach(typeName => {\n            const type = originalTypeMap[typeName];\n            if (isNamedType(type) &&\n                getNamedType(type).name.slice(0, 2) !== '__' &&\n                type !== operationTypes.query &&\n                type !== operationTypes.mutation &&\n                type !== operationTypes.subscription) {\n                addTypeCandidate(typeCandidates, type.name, {\n                    type,\n                    subschema: originalSubschemaMap.get(subschema),\n                    transformedSubschema: subschema,\n                });\n            }\n        });\n    });\n    if (document !== undefined) {\n        extraction.typeDefinitions.forEach(def => {\n            const type = typeFromAST(def);\n            if (type != null) {\n                addTypeCandidate(typeCandidates, type.name, { type });\n            }\n        });\n        extraction.directiveDefs.forEach(def => {\n            const directive = typeFromAST(def);\n            directiveMap[directive.name] = directive;\n        });\n        if (extraction.extensionDefs.length > 0) {\n            extensions.push({\n                ...document,\n                definitions: extraction.extensionDefs,\n            });\n        }\n    }\n    types.forEach(type => addTypeCandidate(typeCandidates, type.name, { type }));\n    return typeCandidates;\n}\nfunction setOperationTypeNames({ schemaDef, schemaExtensions, }, operationTypeNames) {\n    const allNodes = schemaExtensions.slice();\n    if (schemaDef != null) {\n        allNodes.unshift(schemaDef);\n    }\n    allNodes.forEach(node => {\n        if (node.operationTypes != null) {\n            node.operationTypes.forEach(operationType => {\n                operationTypeNames[operationType.operation] = operationType.type.name.value;\n            });\n        }\n    });\n}\nfunction addTypeCandidate(typeCandidates, name, typeCandidate) {\n    if (!(name in typeCandidates)) {\n        typeCandidates[name] = [];\n    }\n    typeCandidates[name].push(typeCandidate);\n}\nexport function buildTypes({ typeCandidates, directives, stitchingInfo, operationTypeNames, onTypeConflict, mergeTypes, typeMergingOptions, }) {\n    const typeMap = Object.create(null);\n    Object.keys(typeCandidates).forEach(typeName => {\n        if (typeName === operationTypeNames.query ||\n            typeName === operationTypeNames.mutation ||\n            typeName === operationTypeNames.subscription ||\n            (mergeTypes === true && !typeCandidates[typeName].some(candidate => isSpecifiedScalarType(candidate.type))) ||\n            (typeof mergeTypes === 'function' && mergeTypes(typeCandidates[typeName], typeName)) ||\n            (Array.isArray(mergeTypes) && mergeTypes.includes(typeName)) ||\n            (stitchingInfo != null && typeName in stitchingInfo.mergedTypes)) {\n            typeMap[typeName] = mergeCandidates(typeName, typeCandidates[typeName], typeMergingOptions);\n        }\n        else {\n            const candidateSelector = onTypeConflict != null\n                ? onTypeConflictToCandidateSelector(onTypeConflict)\n                : (cands) => cands[cands.length - 1];\n            typeMap[typeName] = candidateSelector(typeCandidates[typeName]).type;\n        }\n    });\n    return rewireTypes(typeMap, directives);\n}\nfunction onTypeConflictToCandidateSelector(onTypeConflict) {\n    return cands => cands.reduce((prev, next) => {\n        const type = onTypeConflict(prev.type, next.type, {\n            left: {\n                subschema: prev.subschema,\n                transformedSubschema: prev.transformedSubschema,\n            },\n            right: {\n                subschema: prev.subschema,\n                transformedSubschema: prev.transformedSubschema,\n            },\n        });\n        if (prev.type === type) {\n            return prev;\n        }\n        else if (next.type === type) {\n            return next;\n        }\n        return {\n            schemaName: 'unknown',\n            type,\n        };\n    });\n}\n//# sourceMappingURL=typeCandidates.js.map","import { getNamedType, GraphQLList } from 'graphql';\nimport { delegateToSchema } from '@graphql-tools/delegate';\nimport { batchDelegateToSchema } from '@graphql-tools/batch-delegate';\nexport function createMergedTypeResolver(mergedTypeResolverOptions) {\n    const { fieldName, argsFromKeys, valuesFromResults, args } = mergedTypeResolverOptions;\n    if (argsFromKeys != null) {\n        return (originalResult, context, info, subschema, selectionSet, key) => {\n            var _a;\n            return batchDelegateToSchema({\n                schema: subschema,\n                operation: 'query',\n                fieldName,\n                returnType: new GraphQLList(getNamedType((_a = info.schema.getType(originalResult.__typename)) !== null && _a !== void 0 ? _a : info.returnType)),\n                key,\n                argsFromKeys,\n                valuesFromResults,\n                selectionSet,\n                context,\n                info,\n                skipTypeMerging: true,\n            });\n        };\n    }\n    if (args != null) {\n        return (originalResult, context, info, subschema, selectionSet) => {\n            var _a;\n            return delegateToSchema({\n                schema: subschema,\n                operation: 'query',\n                fieldName,\n                returnType: getNamedType((_a = info.schema.getType(originalResult.__typename)) !== null && _a !== void 0 ? _a : info.returnType),\n                args: args(originalResult),\n                selectionSet,\n                context,\n                info,\n                skipTypeMerging: true,\n            });\n        };\n    }\n    return undefined;\n}\n//# sourceMappingURL=createMergedTypeResolver.js.map","import { GraphQLSchema, Kind, isObjectType, isScalarType, getNamedType, print, isInterfaceType, isLeafType, } from 'graphql';\nimport { parseSelectionSet } from '@graphql-tools/utils';\nimport { createMergedTypeResolver } from './createMergedTypeResolver';\nexport function createStitchingInfo(subschemaMap, typeCandidates, mergeTypes) {\n    const mergedTypes = createMergedTypes(typeCandidates, mergeTypes);\n    const selectionSetsByField = Object.create(null);\n    Object.entries(mergedTypes).forEach(([typeName, mergedTypeInfo]) => {\n        if (mergedTypeInfo.selectionSets == null && mergedTypeInfo.fieldSelectionSets == null) {\n            return;\n        }\n        selectionSetsByField[typeName] = Object.create(null);\n        mergedTypeInfo.selectionSets.forEach((selectionSet, subschemaConfig) => {\n            const schema = subschemaConfig.transformedSchema;\n            const type = schema.getType(typeName);\n            const fields = type.getFields();\n            Object.keys(fields).forEach(fieldName => {\n                const field = fields[fieldName];\n                const fieldType = getNamedType(field.type);\n                if (selectionSet && isLeafType(fieldType) && selectionSetContainsTopLevelField(selectionSet, fieldName)) {\n                    return;\n                }\n                if (selectionSetsByField[typeName][fieldName] == null) {\n                    selectionSetsByField[typeName][fieldName] = {\n                        kind: Kind.SELECTION_SET,\n                        selections: [parseSelectionSet('{ __typename }', { noLocation: true }).selections[0]],\n                    };\n                }\n                selectionSetsByField[typeName][fieldName].selections = selectionSetsByField[typeName][fieldName].selections.concat(selectionSet.selections);\n            });\n        });\n        mergedTypeInfo.fieldSelectionSets.forEach(selectionSetFieldMap => {\n            Object.keys(selectionSetFieldMap).forEach(fieldName => {\n                if (selectionSetsByField[typeName][fieldName] == null) {\n                    selectionSetsByField[typeName][fieldName] = {\n                        kind: Kind.SELECTION_SET,\n                        selections: [parseSelectionSet('{ __typename }', { noLocation: true }).selections[0]],\n                    };\n                }\n                selectionSetsByField[typeName][fieldName].selections = selectionSetsByField[typeName][fieldName].selections.concat(selectionSetFieldMap[fieldName].selections);\n            });\n        });\n    });\n    return {\n        subschemaMap,\n        selectionSetsByType: undefined,\n        selectionSetsByField,\n        dynamicSelectionSetsByField: undefined,\n        mergedTypes,\n    };\n}\nfunction createMergedTypes(typeCandidates, mergeTypes) {\n    const mergedTypes = Object.create(null);\n    Object.keys(typeCandidates).forEach(typeName => {\n        if (typeCandidates[typeName].length > 1 &&\n            (isObjectType(typeCandidates[typeName][0].type) || isInterfaceType(typeCandidates[typeName][0].type))) {\n            const typeCandidatesWithMergedTypeConfig = typeCandidates[typeName].filter(typeCandidate => typeCandidate.transformedSubschema != null &&\n                typeCandidate.transformedSubschema.merge != null &&\n                typeName in typeCandidate.transformedSubschema.merge);\n            if (mergeTypes === true ||\n                (typeof mergeTypes === 'function' && mergeTypes(typeCandidates[typeName], typeName)) ||\n                (Array.isArray(mergeTypes) && mergeTypes.includes(typeName)) ||\n                typeCandidatesWithMergedTypeConfig.length) {\n                const targetSubschemas = [];\n                const typeMaps = new Map();\n                const supportedBySubschemas = Object.create({});\n                const selectionSets = new Map();\n                const fieldSelectionSets = new Map();\n                const resolvers = new Map();\n                typeCandidates[typeName].forEach(typeCandidate => {\n                    var _a, _b;\n                    const subschema = typeCandidate.transformedSubschema;\n                    if (subschema == null) {\n                        return;\n                    }\n                    typeMaps.set(subschema, subschema.transformedSchema.getTypeMap());\n                    const mergedTypeConfig = (_a = subschema === null || subschema === void 0 ? void 0 : subschema.merge) === null || _a === void 0 ? void 0 : _a[typeName];\n                    if (mergedTypeConfig == null) {\n                        return;\n                    }\n                    if (mergedTypeConfig.selectionSet) {\n                        const selectionSet = parseSelectionSet(mergedTypeConfig.selectionSet, { noLocation: true });\n                        selectionSets.set(subschema, selectionSet);\n                    }\n                    if (mergedTypeConfig.fields) {\n                        const parsedFieldSelectionSets = Object.create(null);\n                        Object.keys(mergedTypeConfig.fields).forEach(fieldName => {\n                            if (mergedTypeConfig.fields[fieldName].selectionSet) {\n                                const rawFieldSelectionSet = mergedTypeConfig.fields[fieldName].selectionSet;\n                                parsedFieldSelectionSets[fieldName] = parseSelectionSet(rawFieldSelectionSet, { noLocation: true });\n                            }\n                        });\n                        fieldSelectionSets.set(subschema, parsedFieldSelectionSets);\n                    }\n                    const resolver = (_b = mergedTypeConfig.resolve) !== null && _b !== void 0 ? _b : createMergedTypeResolver(mergedTypeConfig);\n                    if (resolver == null) {\n                        return;\n                    }\n                    const keyFn = mergedTypeConfig.key;\n                    resolvers.set(subschema, keyFn\n                        ? (originalResult, context, info, subschema, selectionSet) => {\n                            const key = keyFn(originalResult);\n                            return resolver(originalResult, context, info, subschema, selectionSet, key);\n                        }\n                        : resolver);\n                    targetSubschemas.push(subschema);\n                    const type = subschema.transformedSchema.getType(typeName);\n                    const fieldMap = type.getFields();\n                    const selectionSet = selectionSets.get(subschema);\n                    Object.keys(fieldMap).forEach(fieldName => {\n                        const field = fieldMap[fieldName];\n                        const fieldType = getNamedType(field.type);\n                        if (selectionSet && isLeafType(fieldType) && selectionSetContainsTopLevelField(selectionSet, fieldName)) {\n                            return;\n                        }\n                        if (!(fieldName in supportedBySubschemas)) {\n                            supportedBySubschemas[fieldName] = [];\n                        }\n                        supportedBySubschemas[fieldName].push(subschema);\n                    });\n                });\n                const sourceSubschemas = typeCandidates[typeName]\n                    .filter(typeCandidate => typeCandidate.transformedSubschema != null)\n                    .map(typeCandidate => typeCandidate.transformedSubschema);\n                const targetSubschemasBySubschema = new Map();\n                sourceSubschemas.forEach(subschema => {\n                    const filteredSubschemas = targetSubschemas.filter(s => s !== subschema);\n                    if (filteredSubschemas.length) {\n                        targetSubschemasBySubschema.set(subschema, filteredSubschemas);\n                    }\n                });\n                mergedTypes[typeName] = {\n                    typeName,\n                    targetSubschemas: targetSubschemasBySubschema,\n                    typeMaps,\n                    selectionSets,\n                    fieldSelectionSets,\n                    uniqueFields: Object.create({}),\n                    nonUniqueFields: Object.create({}),\n                    resolvers,\n                };\n                Object.keys(supportedBySubschemas).forEach(fieldName => {\n                    if (supportedBySubschemas[fieldName].length === 1) {\n                        mergedTypes[typeName].uniqueFields[fieldName] = supportedBySubschemas[fieldName][0];\n                    }\n                    else {\n                        mergedTypes[typeName].nonUniqueFields[fieldName] = supportedBySubschemas[fieldName];\n                    }\n                });\n            }\n        }\n    });\n    return mergedTypes;\n}\nexport function completeStitchingInfo(stitchingInfo, resolvers, schema) {\n    const selectionSetsByType = Object.create(null);\n    [schema.getQueryType(), schema.getMutationType()].forEach(rootType => {\n        if (rootType) {\n            selectionSetsByType[rootType.name] = parseSelectionSet('{ __typename }', { noLocation: true });\n        }\n    });\n    const selectionSetsByField = stitchingInfo.selectionSetsByField;\n    const dynamicSelectionSetsByField = Object.create(null);\n    Object.keys(resolvers).forEach(typeName => {\n        const type = resolvers[typeName];\n        if (isScalarType(type)) {\n            return;\n        }\n        Object.keys(type).forEach(fieldName => {\n            const field = type[fieldName];\n            if (field.selectionSet) {\n                if (typeof field.selectionSet === 'function') {\n                    if (!(typeName in dynamicSelectionSetsByField)) {\n                        dynamicSelectionSetsByField[typeName] = Object.create(null);\n                    }\n                    if (!(fieldName in dynamicSelectionSetsByField[typeName])) {\n                        dynamicSelectionSetsByField[typeName][fieldName] = [];\n                    }\n                    dynamicSelectionSetsByField[typeName][fieldName].push(field.selectionSet);\n                }\n                else {\n                    const selectionSet = parseSelectionSet(field.selectionSet, { noLocation: true });\n                    if (!(typeName in selectionSetsByField)) {\n                        selectionSetsByField[typeName] = Object.create(null);\n                    }\n                    if (!(fieldName in selectionSetsByField[typeName])) {\n                        selectionSetsByField[typeName][fieldName] = {\n                            kind: Kind.SELECTION_SET,\n                            selections: [],\n                        };\n                    }\n                    selectionSetsByField[typeName][fieldName].selections = selectionSetsByField[typeName][fieldName].selections.concat(selectionSet.selections);\n                }\n            }\n        });\n    });\n    Object.keys(selectionSetsByField).forEach(typeName => {\n        const typeSelectionSets = selectionSetsByField[typeName];\n        Object.keys(typeSelectionSets).forEach(fieldName => {\n            const consolidatedSelections = new Map();\n            const selectionSet = typeSelectionSets[fieldName];\n            selectionSet.selections.forEach(selection => {\n                consolidatedSelections.set(print(selection), selection);\n            });\n            selectionSet.selections = Array.from(consolidatedSelections.values());\n        });\n    });\n    stitchingInfo.selectionSetsByType = selectionSetsByType;\n    stitchingInfo.selectionSetsByField = selectionSetsByField;\n    stitchingInfo.dynamicSelectionSetsByField = dynamicSelectionSetsByField;\n    return stitchingInfo;\n}\nexport function addStitchingInfo(stitchedSchema, stitchingInfo) {\n    return new GraphQLSchema({\n        ...stitchedSchema.toConfig(),\n        extensions: {\n            ...stitchedSchema.extensions,\n            stitchingInfo,\n        },\n    });\n}\nexport function selectionSetContainsTopLevelField(selectionSet, fieldName) {\n    return selectionSet.selections.some(selection => selection.kind === Kind.FIELD && selection.name.value === fieldName);\n}\n//# sourceMappingURL=stitchingInfo.js.map","import { getDirectives, MapperKind, mapSchema } from '@graphql-tools/utils';\nimport { cloneSubschemaConfig } from '@graphql-tools/delegate';\nexport function computedDirectiveTransformer(computedDirectiveName) {\n    return (subschemaConfig) => {\n        const newSubschemaConfig = cloneSubschemaConfig(subschemaConfig);\n        mapSchema(subschemaConfig.schema, {\n            [MapperKind.OBJECT_FIELD]: (fieldConfig, fieldName, typeName, schema) => {\n                var _a, _b, _c, _d;\n                const mergeTypeConfig = (_a = newSubschemaConfig.merge) === null || _a === void 0 ? void 0 : _a[typeName];\n                if (mergeTypeConfig == null) {\n                    return undefined;\n                }\n                const computed = getDirectives(schema, fieldConfig)[computedDirectiveName];\n                if (computed == null) {\n                    return undefined;\n                }\n                const selectionSet = computed.fields != null ? `{ ${computed.fields} }` : computed.selectionSet;\n                if (selectionSet == null) {\n                    return undefined;\n                }\n                mergeTypeConfig.fields = (_b = mergeTypeConfig.fields) !== null && _b !== void 0 ? _b : {};\n                mergeTypeConfig.fields[fieldName] = (_c = mergeTypeConfig.fields[fieldName]) !== null && _c !== void 0 ? _c : {};\n                const mergeFieldConfig = mergeTypeConfig.fields[fieldName];\n                mergeFieldConfig.selectionSet = (_d = mergeFieldConfig.selectionSet) !== null && _d !== void 0 ? _d : selectionSet;\n                mergeFieldConfig.computed = true;\n                return undefined;\n            },\n        });\n        return newSubschemaConfig;\n    };\n}\n//# sourceMappingURL=computedDirectiveTransformer.js.map","import { isObjectType, isInterfaceType } from 'graphql';\nimport { getImplementingTypes, pruneSchema, filterSchema } from '@graphql-tools/utils';\nimport { TransformCompositeFields } from '@graphql-tools/wrap';\nexport function isolateComputedFieldsTransformer(subschemaConfig) {\n    if (subschemaConfig.merge == null) {\n        return [subschemaConfig];\n    }\n    const baseSchemaTypes = Object.create(null);\n    const isolatedSchemaTypes = Object.create(null);\n    Object.entries(subschemaConfig.merge).forEach(([typeName, mergedTypeConfig]) => {\n        var _a;\n        baseSchemaTypes[typeName] = mergedTypeConfig;\n        if (mergedTypeConfig.computedFields) {\n            mergedTypeConfig.fields = (_a = mergedTypeConfig.fields) !== null && _a !== void 0 ? _a : Object.create(null);\n            Object.entries(mergedTypeConfig.computedFields).forEach(([fieldName, mergedFieldConfig]) => {\n                var _a;\n                console.warn(`The \"computedFields\" setting is deprecated. Update your @graphql-tools/stitching-directives package, and/or update static merged type config to \"${typeName}.fields.${fieldName} = { selectionSet: '${mergedFieldConfig.selectionSet}', computed: true }\"`);\n                mergedTypeConfig.fields[fieldName] = {\n                    ...((_a = mergedTypeConfig.fields[fieldName]) !== null && _a !== void 0 ? _a : {}),\n                    ...mergedFieldConfig,\n                    computed: true,\n                };\n            });\n            delete mergedTypeConfig.computedFields;\n        }\n        if (mergedTypeConfig.fields) {\n            const baseFields = Object.create(null);\n            const isolatedFields = Object.create(null);\n            Object.entries(mergedTypeConfig.fields).forEach(([fieldName, mergedFieldConfig]) => {\n                if (mergedFieldConfig.computed && mergedFieldConfig.selectionSet) {\n                    isolatedFields[fieldName] = mergedFieldConfig;\n                }\n                else if (mergedFieldConfig.computed) {\n                    throw new Error(`A selectionSet is required for computed field \"${typeName}.${fieldName}\"`);\n                }\n                else {\n                    baseFields[fieldName] = mergedFieldConfig;\n                }\n            });\n            const isolatedFieldCount = Object.keys(isolatedFields).length;\n            const objectType = subschemaConfig.schema.getType(typeName);\n            if (isolatedFieldCount && isolatedFieldCount !== Object.keys(objectType.getFields()).length) {\n                baseSchemaTypes[typeName] = {\n                    ...mergedTypeConfig,\n                    fields: baseFields,\n                };\n                isolatedSchemaTypes[typeName] = {\n                    ...mergedTypeConfig,\n                    fields: isolatedFields,\n                    canonical: undefined,\n                };\n            }\n        }\n    });\n    if (Object.keys(isolatedSchemaTypes).length) {\n        return [\n            filterBaseSubschema({ ...subschemaConfig, merge: baseSchemaTypes }, isolatedSchemaTypes),\n            filterIsolatedSubschema({ ...subschemaConfig, merge: isolatedSchemaTypes }),\n        ];\n    }\n    return [subschemaConfig];\n}\nfunction filterBaseSubschema(subschemaConfig, isolatedSchemaTypes) {\n    var _a;\n    const schema = subschemaConfig.schema;\n    const typesForInterface = {};\n    const filteredSchema = pruneSchema(filterSchema({\n        schema,\n        objectFieldFilter: (typeName, fieldName) => { var _a; return !((_a = isolatedSchemaTypes[typeName]) === null || _a === void 0 ? void 0 : _a.fields[fieldName]); },\n        interfaceFieldFilter: (typeName, fieldName) => {\n            if (!typesForInterface[typeName]) {\n                typesForInterface[typeName] = getImplementingTypes(typeName, schema);\n            }\n            return !typesForInterface[typeName].some(implementingTypeName => { var _a; return (_a = isolatedSchemaTypes[implementingTypeName]) === null || _a === void 0 ? void 0 : _a.fields[fieldName]; });\n        },\n    }));\n    const filteredFields = {};\n    Object.keys(filteredSchema.getTypeMap()).forEach(typeName => {\n        const type = filteredSchema.getType(typeName);\n        if (isObjectType(type) || isInterfaceType(type)) {\n            filteredFields[typeName] = { __typename: true };\n            const fieldMap = type.getFields();\n            Object.keys(fieldMap).forEach(fieldName => {\n                filteredFields[typeName][fieldName] = true;\n            });\n        }\n    });\n    const filteredSubschema = {\n        ...subschemaConfig,\n        merge: subschemaConfig.merge\n            ? {\n                ...subschemaConfig.merge,\n            }\n            : undefined,\n        transforms: ((_a = subschemaConfig.transforms) !== null && _a !== void 0 ? _a : []).concat([\n            new TransformCompositeFields((typeName, fieldName) => { var _a; return (((_a = filteredFields[typeName]) === null || _a === void 0 ? void 0 : _a[fieldName]) ? undefined : null); }, (typeName, fieldName) => { var _a; return (((_a = filteredFields[typeName]) === null || _a === void 0 ? void 0 : _a[fieldName]) ? undefined : null); }),\n        ]),\n    };\n    const remainingTypes = filteredSchema.getTypeMap();\n    Object.keys(filteredSubschema.merge).forEach(mergeType => {\n        if (!remainingTypes[mergeType]) {\n            delete filteredSubschema.merge[mergeType];\n        }\n    });\n    if (!Object.keys(filteredSubschema.merge).length) {\n        delete filteredSubschema.merge;\n    }\n    return filteredSubschema;\n}\nfunction filterIsolatedSubschema(subschemaConfig) {\n    var _a;\n    const rootFields = {};\n    Object.values(subschemaConfig.merge).forEach(mergedTypeConfig => {\n        var _a;\n        const entryPoints = (_a = mergedTypeConfig.entryPoints) !== null && _a !== void 0 ? _a : [mergedTypeConfig];\n        entryPoints.forEach(entryPoint => {\n            rootFields[entryPoint.fieldName] = true;\n        });\n    });\n    const interfaceFields = {};\n    Object.keys(subschemaConfig.merge).forEach(typeName => {\n        subschemaConfig.schema.getType(typeName).getInterfaces().forEach(int => {\n            Object.keys(subschemaConfig.schema.getType(int.name).getFields()).forEach(intFieldName => {\n                if (subschemaConfig.merge[typeName].fields[intFieldName]) {\n                    interfaceFields[int.name] = interfaceFields[int.name] || {};\n                    interfaceFields[int.name][intFieldName] = true;\n                }\n            });\n        });\n    });\n    const filteredSchema = pruneSchema(filterSchema({\n        schema: subschemaConfig.schema,\n        rootFieldFilter: (operation, fieldName) => operation === 'Query' && rootFields[fieldName] != null,\n        objectFieldFilter: (typeName, fieldName) => { var _a; return ((_a = subschemaConfig.merge[typeName]) === null || _a === void 0 ? void 0 : _a.fields[fieldName]) != null; },\n        interfaceFieldFilter: (typeName, fieldName) => { var _a; return ((_a = interfaceFields[typeName]) === null || _a === void 0 ? void 0 : _a[fieldName]) != null; },\n    }));\n    const filteredFields = {};\n    Object.keys(filteredSchema.getTypeMap()).forEach(typeName => {\n        const type = filteredSchema.getType(typeName);\n        if (isObjectType(type) || isInterfaceType(type)) {\n            filteredFields[typeName] = { __typename: true };\n            const fieldMap = type.getFields();\n            Object.keys(fieldMap).forEach(fieldName => {\n                filteredFields[typeName][fieldName] = true;\n            });\n        }\n    });\n    return {\n        ...subschemaConfig,\n        transforms: ((_a = subschemaConfig.transforms) !== null && _a !== void 0 ? _a : []).concat([\n            new TransformCompositeFields((typeName, fieldName) => { var _a; return (((_a = filteredFields[typeName]) === null || _a === void 0 ? void 0 : _a[fieldName]) ? undefined : null); }, (typeName, fieldName) => { var _a; return (((_a = filteredFields[typeName]) === null || _a === void 0 ? void 0 : _a[fieldName]) ? undefined : null); }),\n        ]),\n    };\n}\n//# sourceMappingURL=isolateComputedFieldsTransformer.js.map","import { cloneSubschemaConfig } from '@graphql-tools/delegate';\nexport function splitMergedTypeEntryPointsTransformer(subschemaConfig) {\n    if (!subschemaConfig.merge)\n        return [subschemaConfig];\n    const maxEntryPoints = Object.values(subschemaConfig.merge).reduce((max, mergedTypeConfig) => {\n        var _a, _b;\n        return Math.max(max, (_b = (_a = mergedTypeConfig === null || mergedTypeConfig === void 0 ? void 0 : mergedTypeConfig.entryPoints) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0);\n    }, 0);\n    if (maxEntryPoints === 0)\n        return [subschemaConfig];\n    const subschemaPermutations = [];\n    for (let i = 0; i < maxEntryPoints; i += 1) {\n        const subschemaPermutation = cloneSubschemaConfig(subschemaConfig);\n        const mergedTypesCopy = subschemaPermutation.merge;\n        if (i > 0) {\n            subschemaPermutation.merge = Object.create(null);\n        }\n        Object.keys(mergedTypesCopy).forEach(typeName => {\n            var _a, _b, _c;\n            const mergedTypeConfig = mergedTypesCopy[typeName];\n            const mergedTypeEntryPoint = (_a = mergedTypeConfig === null || mergedTypeConfig === void 0 ? void 0 : mergedTypeConfig.entryPoints) === null || _a === void 0 ? void 0 : _a[i];\n            if (mergedTypeEntryPoint) {\n                if ((_c = (_b = mergedTypeConfig.selectionSet) !== null && _b !== void 0 ? _b : mergedTypeConfig.fieldName) !== null && _c !== void 0 ? _c : mergedTypeConfig.resolve) {\n                    throw new Error(`Merged type ${typeName} may not define entryPoints in addition to selectionSet, fieldName, or resolve`);\n                }\n                Object.assign(mergedTypeConfig, mergedTypeEntryPoint);\n                delete mergedTypeConfig.entryPoints;\n                if (i > 0) {\n                    delete mergedTypeConfig.canonical;\n                    if (mergedTypeConfig.fields != null) {\n                        Object.values(mergedTypeConfig.fields).forEach(mergedFieldConfig => {\n                            delete mergedFieldConfig.canonical;\n                        });\n                    }\n                }\n                subschemaPermutation.merge[typeName] = mergedTypeConfig;\n            }\n        });\n        subschemaPermutations.push(subschemaPermutation);\n    }\n    return subschemaPermutations;\n}\n//# sourceMappingURL=splitMergedTypeEntryPointsTransformer.js.map","import { computedDirectiveTransformer } from './computedDirectiveTransformer';\nexport { computedDirectiveTransformer } from './computedDirectiveTransformer';\nexport { isolateComputedFieldsTransformer } from './isolateComputedFieldsTransformer';\nexport { splitMergedTypeEntryPointsTransformer } from './splitMergedTypeEntryPointsTransformer';\nexport const defaultSubschemaConfigTransforms = [computedDirectiveTransformer('computed')];\n//# sourceMappingURL=index.js.map","import { GraphQLSchema, specifiedDirectives, extendSchema, } from 'graphql';\nimport { SchemaDirectiveVisitor, mergeDeep, pruneSchema } from '@graphql-tools/utils';\nimport { addResolversToSchema, addSchemaLevelResolver, addErrorLoggingToSchema, addCatchUndefinedToSchema, assertResolversPresent, attachDirectiveResolvers, extendResolversFromInterfaces, } from '@graphql-tools/schema';\nimport { isSubschemaConfig, Subschema, defaultMergedResolver } from '@graphql-tools/delegate';\nimport { buildTypeCandidates, buildTypes } from './typeCandidates';\nimport { createStitchingInfo, completeStitchingInfo, addStitchingInfo } from './stitchingInfo';\nimport { defaultSubschemaConfigTransforms, isolateComputedFieldsTransformer, splitMergedTypeEntryPointsTransformer, } from './subschemaConfigTransforms';\nexport function stitchSchemas({ subschemas = [], types = [], typeDefs, onTypeConflict, mergeDirectives, mergeTypes = true, typeMergingOptions, subschemaConfigTransforms = defaultSubschemaConfigTransforms, resolvers = {}, schemaDirectives, inheritResolversFromInterfaces = false, logger, allowUndefinedInResolve = true, resolverValidationOptions = {}, directiveResolvers, schemaTransforms = [], parseOptions = {}, pruningOptions, updateResolversInPlace, }) {\n    if (typeof resolverValidationOptions !== 'object') {\n        throw new Error('Expected `resolverValidationOptions` to be an object');\n    }\n    let transformedSubschemas = [];\n    const subschemaMap = new Map();\n    const originalSubschemaMap = new Map();\n    subschemas.forEach(subschemaOrSubschemaArray => {\n        if (Array.isArray(subschemaOrSubschemaArray)) {\n            subschemaOrSubschemaArray.forEach(s => {\n                transformedSubschemas = transformedSubschemas.concat(applySubschemaConfigTransforms(subschemaConfigTransforms, s, subschemaMap, originalSubschemaMap));\n            });\n        }\n        else {\n            transformedSubschemas = transformedSubschemas.concat(applySubschemaConfigTransforms(subschemaConfigTransforms, subschemaOrSubschemaArray, subschemaMap, originalSubschemaMap));\n        }\n    });\n    const extensions = [];\n    const directives = [];\n    const directiveMap = specifiedDirectives.reduce((acc, directive) => {\n        acc[directive.name] = directive;\n        return acc;\n    }, Object.create(null));\n    const schemaDefs = Object.create(null);\n    const operationTypeNames = {\n        query: 'Query',\n        mutation: 'Mutation',\n        subscription: 'Subscription',\n    };\n    const typeCandidates = buildTypeCandidates({\n        subschemas: transformedSubschemas,\n        originalSubschemaMap,\n        types,\n        typeDefs,\n        parseOptions,\n        extensions,\n        directiveMap,\n        schemaDefs,\n        operationTypeNames,\n        mergeDirectives,\n    });\n    Object.keys(directiveMap).forEach(directiveName => {\n        directives.push(directiveMap[directiveName]);\n    });\n    let stitchingInfo = createStitchingInfo(subschemaMap, typeCandidates, mergeTypes);\n    const { typeMap: newTypeMap, directives: newDirectives } = buildTypes({\n        typeCandidates,\n        directives,\n        stitchingInfo,\n        operationTypeNames,\n        onTypeConflict,\n        mergeTypes,\n        typeMergingOptions,\n    });\n    let schema = new GraphQLSchema({\n        query: newTypeMap[operationTypeNames.query],\n        mutation: newTypeMap[operationTypeNames.mutation],\n        subscription: newTypeMap[operationTypeNames.subscription],\n        types: Object.keys(newTypeMap).map(key => newTypeMap[key]),\n        directives: newDirectives,\n        astNode: schemaDefs.schemaDef,\n        extensionASTNodes: schemaDefs.schemaExtensions,\n        extensions: null,\n    });\n    extensions.forEach(extension => {\n        schema = extendSchema(schema, extension, {\n            commentDescriptions: true,\n        });\n    });\n    // We allow passing in an array of resolver maps, in which case we merge them\n    const resolverMap = Array.isArray(resolvers) ? resolvers.reduce(mergeDeep, {}) : resolvers;\n    const finalResolvers = inheritResolversFromInterfaces\n        ? extendResolversFromInterfaces(schema, resolverMap)\n        : resolverMap;\n    stitchingInfo = completeStitchingInfo(stitchingInfo, finalResolvers, schema);\n    schema = addResolversToSchema({\n        schema,\n        defaultFieldResolver: defaultMergedResolver,\n        resolvers: finalResolvers,\n        resolverValidationOptions,\n        inheritResolversFromInterfaces: false,\n        updateResolversInPlace,\n    });\n    if (Object.keys(resolverValidationOptions).length > 0) {\n        assertResolversPresent(schema, resolverValidationOptions);\n    }\n    schema = addStitchingInfo(schema, stitchingInfo);\n    if (!allowUndefinedInResolve) {\n        schema = addCatchUndefinedToSchema(schema);\n    }\n    if (logger != null) {\n        schema = addErrorLoggingToSchema(schema, logger);\n    }\n    if (typeof finalResolvers['__schema'] === 'function') {\n        // TODO a bit of a hack now, better rewrite generateSchema to attach it there.\n        // not doing that now, because I'd have to rewrite a lot of tests.\n        schema = addSchemaLevelResolver(schema, finalResolvers['__schema']);\n    }\n    schemaTransforms.forEach(schemaTransform => {\n        schema = schemaTransform(schema);\n    });\n    if (directiveResolvers != null) {\n        schema = attachDirectiveResolvers(schema, directiveResolvers);\n    }\n    if (schemaDirectives != null) {\n        SchemaDirectiveVisitor.visitSchemaDirectives(schema, schemaDirectives);\n    }\n    if (pruningOptions) {\n        schema = pruneSchema(schema, pruningOptions);\n    }\n    return schema;\n}\nconst subschemaConfigTransformerPresets = [isolateComputedFieldsTransformer, splitMergedTypeEntryPointsTransformer];\nfunction applySubschemaConfigTransforms(subschemaConfigTransforms, subschemaOrSubschemaConfig, subschemaMap, originalSubschemaMap) {\n    const subschemaConfig = isSubschemaConfig(subschemaOrSubschemaConfig)\n        ? subschemaOrSubschemaConfig\n        : { schema: subschemaOrSubschemaConfig };\n    let transformedSubschemaConfigs = [subschemaConfig];\n    subschemaConfigTransforms.concat(subschemaConfigTransformerPresets).forEach(subschemaConfigTransform => {\n        const mapped = transformedSubschemaConfigs.map(ssConfig => subschemaConfigTransform(ssConfig));\n        transformedSubschemaConfigs = mapped.reduce((acc, configOrList) => {\n            if (Array.isArray(configOrList)) {\n                return acc.concat(configOrList);\n            }\n            acc.push(configOrList);\n            return acc;\n        }, []);\n    });\n    const transformedSubschemas = transformedSubschemaConfigs.map(ssConfig => new Subschema(ssConfig));\n    const baseSubschema = transformedSubschemas[0];\n    subschemaMap.set(subschemaOrSubschemaConfig, baseSubschema);\n    transformedSubschemas.forEach(subschema => originalSubschemaMap.set(subschema, subschemaOrSubschemaConfig));\n    return transformedSubschemas;\n}\n//# sourceMappingURL=stitchSchemas.js.map","import { parseSelectionSet } from '@graphql-tools/utils';\nimport { Kind } from 'graphql';\nexport const forwardArgsToSelectionSet = (selectionSet, mapping) => {\n    const selectionSetDef = parseSelectionSet(selectionSet, { noLocation: true });\n    return (field) => {\n        const selections = selectionSetDef.selections.map((selectionNode) => {\n            if (selectionNode.kind === Kind.FIELD) {\n                if (!mapping) {\n                    return { ...selectionNode, arguments: field.arguments.slice() };\n                }\n                else if (selectionNode.name.value in mapping) {\n                    const selectionArgs = mapping[selectionNode.name.value];\n                    return {\n                        ...selectionNode,\n                        arguments: field.arguments.filter((arg) => selectionArgs.includes(arg.name.value)),\n                    };\n                }\n            }\n            return selectionNode;\n        });\n        return { ...selectionSetDef, selections };\n    };\n};\n//# sourceMappingURL=selectionSetArgs.js.map"],"names":[],"mappings":"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"}