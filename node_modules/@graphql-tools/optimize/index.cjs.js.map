{"version":3,"file":"index.cjs.js","sources":["../../../dist/optimize/src/optimizers/remove-description.js","../../../dist/optimize/src/optimizers/remove-empty-nodes.js","../../../dist/optimize/src/optimizers/remove-loc.js","../../../dist/optimize/src/optimize.js"],"sourcesContent":["import { visit } from 'graphql';\n/**\n * This optimizer removes \"desciption\" field from schema AST definitions.\n * @param input\n */\nexport const removeDescriptions = input => {\n    function transformNode(node) {\n        if (node.description) {\n            node.description = undefined;\n        }\n        return node;\n    }\n    return visit(input, {\n        ScalarTypeDefinition: transformNode,\n        ObjectTypeDefinition: transformNode,\n        InterfaceTypeDefinition: transformNode,\n        UnionTypeDefinition: transformNode,\n        EnumTypeDefinition: transformNode,\n        EnumValueDefinition: transformNode,\n        InputObjectTypeDefinition: transformNode,\n        InputValueDefinition: transformNode,\n        FieldDefinition: transformNode,\n    });\n};\n//# sourceMappingURL=remove-description.js.map","import { visit } from 'graphql';\n/**\n * This optimizer removes empty nodes/arrays (directives/argument/variableDefinitions) from a given DocumentNode of operation/fragment.\n * @param input\n */\nexport const removeEmptyNodes = input => {\n    function transformNode(node) {\n        let resultNode = node;\n        if (resultNode.directives && Array.isArray(resultNode.directives) && resultNode.directives.length === 0) {\n            const { directives, ...rest } = resultNode;\n            resultNode = rest;\n        }\n        if (resultNode.arguments && Array.isArray(resultNode.arguments) && resultNode.arguments.length === 0) {\n            const { arguments: args, ...rest } = resultNode;\n            resultNode = rest;\n        }\n        if (resultNode.variableDefinitions &&\n            Array.isArray(resultNode.variableDefinitions) &&\n            resultNode.variableDefinitions.length === 0) {\n            const { variableDefinitions, ...rest } = resultNode;\n            resultNode = rest;\n        }\n        return resultNode;\n    }\n    return visit(input, {\n        FragmentDefinition: transformNode,\n        OperationDefinition: transformNode,\n        VariableDefinition: transformNode,\n        Field: transformNode,\n        FragmentSpread: transformNode,\n        InlineFragment: transformNode,\n        Name: transformNode,\n        Directive: transformNode,\n    });\n};\n//# sourceMappingURL=remove-empty-nodes.js.map","import { visit } from 'graphql';\n/**\n * This optimizer removes \"loc\" fields\n * @param input\n */\nexport const removeLoc = input => {\n    function transformNode(node) {\n        if (node.loc && typeof node.loc === 'object') {\n            const { loc, ...rest } = node;\n            return rest;\n        }\n        return node;\n    }\n    return visit(input, { enter: transformNode });\n};\n//# sourceMappingURL=remove-loc.js.map","import { removeDescriptions } from './optimizers/remove-description';\nimport { removeEmptyNodes } from './optimizers/remove-empty-nodes';\nimport { removeLoc } from './optimizers/remove-loc';\nconst DEFAULT_OPTIMIZERS = [removeDescriptions, removeEmptyNodes, removeLoc];\n/**\n * This method accept a DocumentNode and applies the optimizations you wish to use.\n * You can override the defualt ones or provide you own optimizers if you wish.\n *\n * @param node document to optimize\n * @param optimizers optional, list of optimizer to use\n */\nexport function optimizeDocumentNode(node, optimizers = DEFAULT_OPTIMIZERS) {\n    let resultNode = node;\n    for (const optimizer of optimizers) {\n        if (typeof optimizer !== 'function') {\n            throw new Error(`Optimizer provided for \"optimizeDocumentNode\" must be a function!`);\n        }\n        const result = optimizer(resultNode);\n        if (!result) {\n            throw new Error(`Optimizer provided for \"optimizeDocumentNode\" returned empty value instead of modified \"DocumentNode\"!`);\n        }\n        resultNode = result;\n    }\n    return resultNode;\n}\n//# sourceMappingURL=optimize.js.map"],"names":["visit"],"mappings":"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"}